cat("Mean crocA d18Owater:", round(mean_crocwater_synth, 2), "\n")
cat("95% CI for crocA d18Owater: [", round(crocwatersynth_lower_95_CI, 2), ",", round(crocwatersynth_upper_95_CI, 2), "]\n")
summary(crocA_water_simulations)
mean(crocA$d18O)
Amiot_residual_error
Amiot_residual_sd
mean(Amiot_residual_error)
Amiot_slope * mean(crocA$d18O) + Amiot_intercept + mean(Amiot_residual_error)
summary(crocA_water_simulations)
Amiot_slope
# Simulate regression coefficients for the regression model
set.seed(123)  # For reproducibility
n_iterations <- 1e5  # Number of Monte Carlo simulations
# Store Croc B d18Op synth means in vector
crocB_synthmeans_d18Op <- synth_crocB$means
mean(crocB_synthmeans_d18Op)
# simulate d18Owater estimates
crocB_water_simulations <- Amiot_simulated_slope * crocB_synthmeans_d18Op + Amiot_simulated_intercept + Amiot_residual_error
mean(crocB_water_simulations)
# Sort the simulated water values
sorted_crocB_synthd18Owater <- sort(crocB_water_simulations)
# Calculate 95% CI percentiles
crocwatersynth_lower_95_CI <- quantile(sorted_crocB_synthd18Owater, probs = 0.025)
crocwatersynth_upper_95_CI <- quantile(sorted_crocB_synthd18Owater, probs = 0.975)
# Compute the mean of the data
mean_crocwater_synth <- mean(sorted_crocB_synthd18Owater)
# Print the results
cat("Mean crocB d18Owater:", round(mean_crocwater_synth, 2), "\n")
cat("95% CI for crocB d18Owater: [", round(crocwatersynth_lower_95_CI, 2), ",", round(crocwatersynth_upper_95_CI, 2), "]\n")
summary(crocB_water_simulations)
## Error Analysis for crocwater --------------------------------------------
# Set seed for reproducibility
set.seed(123)
# Number of Monte Carlo iterations
n_iterations <- 1e5
# Input variables
slope <- Amiot_simulated_slope
intercept <- Amiot_simulated_intercept
residual_error <- Amiot_residual_error
synth_mean <- synth_crocG$means
# Define the model function
crocwater_model <- function(slope, intercept, residual_error, synth_mean) {
return(slope * synth_mean + intercept + residual_error)
}
# Simulate outputs varying all inputs
output <- crocwater_model(slope, intercept, residual_error, synth_mean)
# Simulate outputs varying one input at a time
mean_slope <- mean(slope)
mean_intercept <- mean(intercept)
mean_residual <- mean(residual_error)
mean_synth <- mean(synth_mean)
output_slope <- crocwater_model(slope, mean_intercept, mean_residual, mean_synth)
output_intercept <- crocwater_model(mean_slope, intercept, mean_residual, mean_synth)
output_residual <- crocwater_model(mean_slope, mean_intercept, residual_error, mean_synth)
output_synth <- crocwater_model(mean_slope, mean_intercept, mean_residual, synth_mean)
# Calculate variances
total_variance <- var(output)
var_slope <- var(output_slope)
var_intercept <- var(output_intercept)
var_residual <- var(output_residual)
var_synth <- var(output_synth)
# Normalize contributions
slope_contribution <- var_slope / total_variance
intercept_contribution <- var_intercept / total_variance
residual_contribution <- var_residual / total_variance
synth_contribution <- var_synth / total_variance
# Display results
cat("Variance Contributions:\n")
cat("Slope:", round(slope_contribution, 3), "\n")
cat("Intercept:", round(intercept_contribution, 3), "\n")
cat("Residual Error:", round(residual_contribution, 3), "\n")
cat("Synth Mean:", round(synth_contribution, 3), "\n")
# Visualize contributions with a bar plot
library(ggplot2)
# Create a data frame for plotting
contributions <- data.frame(
Input = c("Slope", "Intercept", "Residual Error", "Synth Mean"),
Contribution = c(slope_contribution, intercept_contribution, residual_contribution, synth_contribution)
)
# Plot
ggplot(contributions, aes(x = reorder(Input, -Contribution), y = Contribution)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Variance Contributions to crocwater",
x = "Input Variable",
y = "Proportion of Variance") +
coord_flip()
# Print the results
cat("Mean crocB d18Owater:", round(mean_crocwater_synth, 2), "\n")
cat("95% CI for crocB d18Owater: [", round(crocwatersynth_lower_95_CI, 2), ",", round(crocwatersynth_upper_95_CI, 2), "]\n")
# Monte Carlo simulation for the regression
# Store Naomichelys d18Op synth means in vector
naomi_synthmeans_d18Op <- synth_naomichelys$means
mean(naomi_synthmeans_d18Op)
# simulate d18Owater estimates
naomi_water_simulations <- Barrick_simulated_slope * naomi_synthmeans_d18Op + Barrick_simulated_intercept + Barrick_residual_error
# Extract the regression coefficients and standard errors
Barrick_model_summary <- summary(Barrick_lm_model)
Barrick_intercept <- coef(Barrick_lm_model)[1]
Barrick_slope <- coef(Barrick_lm_model)[2]
Barrick_intercept_se <- coef(Barrick_model_summary)[1, "Std. Error"]  # Standard error for intercept
Barrick_slope_se <- coef(Barrick_model_summary)[2, "Std. Error"]      # Standard error for slope
cat("Standard Error for Intercept:", Barrick_intercept_se, "\n")
cat("Standard Error for Slope:", Barrick_slope_se, "\n")
# Store Glyptops d18Op synth means in vector
glyp_synthmeans_d18Op <- synth_glyptops$means
# Define function to compute d18Owater with regression uncertainty
turtlewater <- function(glyp_synthmeans_d18Op, Barrick_slope, Barrick_intercept) {
Barrick_slope * glyp_synthmeans_d18Op + Barrick_intercept
}
# Simulate regression coefficients for the Barrick regression model
set.seed(123)  # For reproducibility
n_iterations <- 1e5  # Number of Monte Carlo simulations
# Define
Barrick_residual_sd <- summary(Barrick_lm_model)$sigma
# Generate simulated slope and intercept values
Barrick_simulated_slope <- rnorm(n_iterations, mean = Barrick_slope, sd = Barrick_slope_se)
Barrick_simulated_intercept <- rnorm(n_iterations, mean = Barrick_intercept, sd = Barrick_intercept_se)
# Monte Carlo simulation for the regression
# simulate residual error
Barrick_residual_error <- rnorm(n_iterations, mean = 0, sd = Barrick_residual_sd)
# Store Glyptops d18Op synth means in vector
glyp_synthmeans_d18Op <- synth_glyptops$means
mean(glyp_synthmeans_d18Op)
# simulate d18Owater estimates
glyp_water_simulations <- Barrick_simulated_slope * glyp_synthmeans_d18Op + Barrick_simulated_intercept + Barrick_residual_error
mean(glyp_water_simulations)
# Sort the simulated water values
glyp_sorted_synthwater <- sort(glyp_water_simulations)
# Calculate 95% CI percentiles
glypwatersynth_lower_95_CI <- quantile(glyp_sorted_synthwater, probs = 0.025)
glypwatersynth_upper_95_CI <- quantile(glyp_sorted_synthwater, probs = 0.975)
# Compute the mean of the middle 95% of the data
mean_glyp_synthwater <- mean(glyp_sorted_synthwater)
# Print the results
cat("Mean Glyptops d18Owater:", round(mean_glyp_synthwater, 2), "\n")
cat("95% CI for Glyptops d18Owater: [", round(glypwatersynth_lower_95_CI, 2), ",", round(glypwatersynth_upper_95_CI, 2), "]\n")
t.test(glyp_water_simulations, crocG_water_simulations, var.equal = FALSE)
# Simulate regression coefficients for the Barrick regression model
set.seed(123)  # For reproducibility
n_iterations <- 1e5  # Number of Monte Carlo simulations
# Monte Carlo simulation for the regression
# Store Naomichelys d18Op synth means in vector
naomi_synthmeans_d18Op <- synth_naomichelys$means
mean(naomi_synthmeans_d18Op)
# simulate d18Owater estimates
naomi_water_simulations <- Barrick_simulated_slope * naomi_synthmeans_d18Op + Barrick_simulated_intercept + Barrick_residual_error
mean(naomi_water_simulations)
# Simulate regression coefficients for the Barrick regression model
set.seed(123)  # For reproducibility
n_iterations <- 1e5  # Number of Monte Carlo simulations
# Monte Carlo simulation for the regression
# Store Naomichelys d18Op synth means in vector
naomi_synthmeans_d18Op <- synth_naomichelys$means
mean(naomi_synthmeans_d18Op)
# simulate d18Owater estimates
naomi_water_simulations <- Barrick_simulated_slope * naomi_synthmeans_d18Op + Barrick_simulated_intercept + Barrick_residual_error
mean(naomi_water_simulations)
# Sort the simulated water values
naomi_sorted_synthwater <- sort(naomi_water_simulations)
# Calculate 95% CI percentiles
naomiwatersynth_lower_95_CI <- quantile(naomi_sorted_synthwater, probs = 0.025)
naomiwatersynth_upper_95_CI <- quantile(naomi_sorted_synthwater, probs = 0.975)
# Compute the mean of the middle 95% of the data
mean_naomi_synthwater <- mean(naomi_sorted_synthwater)
# Print the results
cat("Mean Naomichelys d18Owater:", round(mean_naomi_synthwater, 2), "\n")
cat("95% CI for Naomichelys d18Owater: [", round(naomiwatersynth_lower_95_CI, 2), ",", round(naomiwatersynth_upper_95_CI, 2), "]\n")
## Error Analysis for Glyptops ----------------------------------------------
# Set seed for reproducibility
set.seed(123)
# Number of Monte Carlo iterations
n_iterations <- 1e5
# Input variables
slope <- Barrick_simulated_slope
intercept <- Barrick_simulated_intercept
residual_error <- Barrick_residual_error
synth_mean <- synth_glyptops$means
# Define the model function
turtlewater_model <- function(slope, intercept, residual_error, synth_mean) {
return(slope * synth_mean + intercept + residual_error)
}
# Simulate outputs varying all inputs
output <- turtlewater_model(slope, intercept, residual_error, synth_mean)
# Simulate outputs varying one input at a time
mean_slope <- mean(slope)
mean_intercept <- mean(intercept)
mean_residual <- mean(residual_error)
mean_synth <- mean(synth_mean)
output_slope <- turtlewater_model(slope, mean_intercept, mean_residual, mean_synth)
output_intercept <- turtlewater_model(mean_slope, intercept, mean_residual, mean_synth)
output_residual <- turtlewater_model(mean_slope, mean_intercept, residual_error, mean_synth)
output_synth <- turtlewater_model(mean_slope, mean_intercept, mean_residual, synth_mean)
# Calculate variances
total_variance <- var(output)
var_slope <- var(output_slope)
var_intercept <- var(output_intercept)
var_residual <- var(output_residual)
var_synth <- var(output_synth)
# Normalize contributions
slope_contribution <- var_slope / total_variance
intercept_contribution <- var_intercept / total_variance
residual_contribution <- var_residual / total_variance
synth_contribution <- var_synth / total_variance
# Display results
cat("Variance Contributions:\n")
cat("Slope:", round(slope_contribution, 3), "\n")
cat("Intercept:", round(intercept_contribution, 3), "\n")
cat("Residual Error:", round(residual_contribution, 3), "\n")
cat("Synth Mean:", round(synth_contribution, 3), "\n")
# Visualize contributions with a bar plot
library(ggplot2)
# Create a data frame for plotting
contributions <- data.frame(
Input = c("Slope", "Intercept", "Residual Error", "Synth Mean"),
Contribution = c(slope_contribution, intercept_contribution, residual_contribution, synth_contribution)
)
# Plot
ggplot(contributions, aes(x = reorder(Input, -Contribution), y = Contribution)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Variance Contributions to turtlewater",
x = "Input Variable",
y = "Proportion of Variance") +
coord_flip()
sum(slope_contribution, intercept_contribution, residual_contribution, synth_contribution)
cat("Mean Naomichelys d18Owater:", round(mean_naomi_synthwater, 2), "\n")
cat("95% CI for Naomichelys d18Owater: [", round(naomiwatersynth_lower_95_CI, 2), ",", round(naomiwatersynth_upper_95_CI, 2), "]\n")
# Sort the simulated water values
sorted_crocG_synthd18Owater <- sort(crocG_water_simulations)
# Calculate 95% CI percentiles
crocGwatersynth_lower_95_CI <- quantile(sorted_crocG_synthd18Owater, probs = 0.025)
crocGwatersynth_upper_95_CI <- quantile(sorted_crocG_synthd18Owater, probs = 0.975)
# Compute the mean of the data
mean_crocGwater_synth <- mean(sorted_crocG_synthd18Owater)
# Print the results
cat("Mean crocG d18Owater:", round(mean_crocGwater_synth, 2), "\n")
cat("95% CI for crocG d18Owater: [", round(crocGwatersynth_lower_95_CI, 2), ",", round(crocwatersynth_upper_95_CI, 2), "]\n")
# Calculate 95% CI percentiles
crocAwatersynth_lower_95_CI <- quantile(sorted_crocA_synthd18Owater, probs = 0.025)
crocAwatersynth_upper_95_CI <- quantile(sorted_crocA_synthd18Owater, probs = 0.975)
# Compute the mean of the data
mean_crocAwater_synth <- mean(sorted_crocA_synthd18Owater)
# Print the results
cat("Mean crocA d18Owater:", round(mean_crocAwater_synth, 2), "\n")
cat("95% CI for crocA d18Owater: [", round(crocAwatersynth_lower_95_CI, 2), ",", round(crocwatersynth_upper_95_CI, 2), "]\n")
summary(crocA_water_simulations)
# Calculate 95% CI percentiles
crocBwatersynth_lower_95_CI <- quantile(sorted_crocB_synthd18Owater, probs = 0.025)
crocBwatersynth_upper_95_CI <- quantile(sorted_crocB_synthd18Owater, probs = 0.975)
# Compute the mean of the data
mean_crocBwater_synth <- mean(sorted_crocB_synthd18Owater)
# Print the results
cat("Mean crocB d18Owater:", round(mean_crocBwater_synth, 2), "\n")
cat("95% CI for crocB d18Owater: [", round(crocBwatersynth_lower_95_CI, 2), ",", round(crocwatersynth_upper_95_CI, 2), "]\n")
water_sims <- data.frame(
Taxon = c("crocG", "crocA", "crocB", "Glyptops", "Naomichelys"),
Mean_d18Owater = c(mean_crocGwater_synth, mean_crocAwater_synth, mean_crocBwater_synth, mean_glyp_synthwater, mean_naomi_synthwater),
Lower_95_CI = c(crocGwatersynth_lower_95_CI, crocAwatersynth_lower_95_CI, crocBwatersynth_lower_95_CI, glypwatersynth_lower_95_CI, naomiwatersynth_lower_95_CI),
Upper_95_CI = c(crocGwatersynth_upper_95_CI, crocAwatersynth_upper_95_CI, crocBwatersynth_upper_95_CI, glypwatersynth_upper_95_CI, naomiwatersynth_upper_95_CI)
)
# Print the DataFrame
print(water_sims)
# Export to CSV
write.csv(water_sims, file = "/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op/Data/d18Owater_MCsim_summary.csv", row.names = FALSE)
V1075_MCwater <- read.csv("/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op/Data/d18Owater_MCsim_summary.csv")
V1075_MCwater
# Define the conditions for assigning values to the "Habitat" column
V1075_MCwater$Habitat <- ifelse(V1075_MCwater$Taxon %in% c("Glyptops", "crocG", "crocB"), "Amphibious",
ifelse(V1075_MCwater$Taxon %in% c("Naomichelys", "crocA"), "Terrestrial", NA))
V1075_MCwater
# Reorder Taxon based on Habitat
V1075_MCwater$Taxon <- factor(V1075_MCwater$Taxon, levels = unique(V1075_MCwater$Taxon[order(V1075_MCwater$Habitat)]))
ggplot(V1075_MCwater, aes(x = Mean_d18Owater, y = Taxon)) +
geom_point() +  # Add points for mean
geom_errorbarh(aes(xmin = loCL, xmax = hiCL), height = 0.2) +  # Add horizontal error bars
labs(x = "d18Owater", y = "Taxon")  # Label x and y axes
ggplot(V1075_MCwater, aes(x = Mean_d18Owater, y = Taxon)) +
geom_point() +  # Add points for mean
geom_errorbarh(aes(xmin = Lower_95_CI, xmax = Upper_95_CI), height = 0.2) +  # Add horizontal error bars
labs(x = "d18Owater", y = "Taxon")  # Label x and y axes
# create delta notation for label
oxydeltphosphate <- expression(paste(delta^{18}, "O"[p], " (‰ V-SMOW)"))
oxydeltwater <- expression(paste(delta^{18}, "O"[ingested_water], " (‰ V-SMOW)"))
# Plotting
ggplot(V1075_MCwater, aes(x = MEAN, y = Taxon)) +
geom_point() +  # Add points for mean
geom_errorbarh(aes(xmin = loCL, xmax = hiCL), height = 0.2) +  # Add horizontal error bars
labs(x = oxydeltwater, y = element_blank()) +  # Label x and y axes
theme_minimal() +  # Set minimal theme
scale_x_continuous(breaks = seq(0, -10, by = -1)) +
theme(panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=1),  # Remove background
axis.text.x = element_text(color= "black", size=8),
axis.text.y = element_text(color= "black", size=8, face = "italic"),
axis.ticks = element_line())
# Plotting
ggplot(V1075_MCwater, aes(x = MEAN, y = Taxon)) +
geom_point() +  # Add points for mean
geom_errorbarh(aes(xmin = loCL, xmax = hiCL), height = 0.2) +  # Add horizontal error bars
labs(x = oxydeltwater, y = element_blank()) +  # Label x and y axes
theme_minimal() +  # Set minimal theme
scale_x_continuous(breaks = seq(0, -10, by = -1)) +
theme(panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
panel.background = element_blank(),
panel.border = linewidth(colour = "black", fill=NA, size=1),  # Remove background
axis.text.x = linewidth(color= "black", size=8),
axis.text.y = element_text(color= "black", size=8, face = "italic"),
axis.ticks = element_line())
# Plotting
ggplot(V1075_MCwater, aes(x = MEAN, y = Taxon)) +
geom_point() +  # Add points for mean
geom_errorbarh(aes(xmin = loCL, xmax = hiCL), height = 0.2) +  # Add horizontal error bars
labs(x = oxydeltwater, y = element_blank()) +  # Label x and y axes
theme_minimal() +  # Set minimal theme
scale_x_continuous(breaks = seq(0, -10, by = -1)) +
theme(panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
panel.background = element_blank(),
panel.border = linewidth(colour = "black", fill=NA, size=1),  # Remove background
axis.text.x = element_text(color= "black", size=8),
axis.text.y = element_text(color= "black", size=8, face = "italic"),
axis.ticks = element_line())
# Plotting
ggplot(V1075_MCwater, aes(x = MEAN, y = Taxon)) +
geom_point() +  # Add points for mean
geom_errorbarh(aes(xmin = loCL, xmax = hiCL), height = 0.2) +  # Add horizontal error bars
labs(x = oxydeltwater, y = element_blank()) +  # Label x and y axes
theme_minimal() +  # Set minimal theme
scale_x_continuous(breaks = seq(0, -10, by = -1)) +
theme(panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=1),  # Remove background
axis.text.x = element_text(color= "black", size=8),
axis.text.y = element_text(color= "black", size=8, face = "italic"),
axis.ticks = element_line())
# Plotting
ggplot(V1075_MCwater, aes(x = Mean_d18Owater, y = Taxon)) +
geom_point() +  # Add points for mean
geom_errorbarh(aes(xmin = Lower_95_CI, xmax = Upper_95_CI), height = 0.2) +  # Add horizontal error bars
labs(x = oxydeltwater, y = element_blank()) +  # Label x and y axes
theme_minimal() +  # Set minimal theme
scale_x_continuous(breaks = seq(0, -10, by = -1)) +
theme(panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=1),  # Remove background
axis.text.x = element_text(color= "black", size=8),
axis.text.y = element_text(color= "black", size=8, face = "italic"),
axis.ticks = element_line())
V1075_MCwater$Taxon[which(V1075_MCwater$Taxon == "crocA")] <- "Neosuchian A"
V1075_MCwater$Taxon == "crocA"
V1075_MCwater
V1075_MCwater <- read.csv("/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op/Data/d18Owater_MCsim_summary.csv")
V1075_MCwater$Taxon[which(V1075_MCwater$Taxon == "crocA")] <- "Neosuchian A"
V1075_MCwater$Taxon
V1075_MCwater$Taxon[which(V1075_MCwater$Taxon == "crocA")] <- "Neosuchian A"
V1075_MCwater$Taxon[which(V1075_MCwater$Taxon == "crocB")] <- "Neosuchian B"
V1075_MCwater$Taxon[which(V1075_MCwater$Taxon == "crocG")] <- "Neosuchian G"
V1075_MCwater$Taxon
# Define the conditions for assigning values to the "Habitat" column
V1075_MCwater$Habitat <- ifelse(V1075_MCwater$Taxon %in% c("Glyptops", "crocG", "crocB"), "Amphibious",
ifelse(V1075_MCwater$Taxon %in% c("Naomichelys", "crocA"), "Terrestrial", NA))
# Reorder Taxon based on Habitat
V1075_MCwater$Taxon <- factor(V1075_MCwater$Taxon, levels = unique(V1075_MCwater$Taxon[order(V1075_MCwater$Habitat)]))
# Plotting
ggplot(V1075_MCwater, aes(x = Mean_d18Owater, y = Taxon)) +
geom_point() +  # Add points for mean
geom_errorbarh(aes(xmin = Lower_95_CI, xmax = Upper_95_CI), height = 0.2) +  # Add horizontal error bars
labs(x = "d18Owater", y = "Taxon")  # Label x and y axes
# create delta notation for label
oxydeltphosphate <- expression(paste(delta^{18}, "O"[p], " (‰ V-SMOW)"))
oxydeltwater <- expression(paste(delta^{18}, "O"[ingested_water], " (‰ V-SMOW)"))
# Plotting
ggplot(V1075_MCwater, aes(x = Mean_d18Owater, y = Taxon)) +
geom_point() +  # Add points for mean
geom_errorbarh(aes(xmin = Lower_95_CI, xmax = Upper_95_CI), height = 0.2) +  # Add horizontal error bars
labs(x = oxydeltwater, y = element_blank()) +  # Label x and y axes
theme_minimal() +  # Set minimal theme
scale_x_continuous(breaks = seq(0, -10, by = -1)) +
theme(panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=1),  # Remove background
axis.text.x = element_text(color= "black", size=8),
axis.text.y = element_text(color= "black", size=8, face = "italic"),
axis.ticks = element_line())
# create delta notation for label
oxydeltphosphate <- expression(paste(delta^{18}, "O"[p], " (‰ V-SMOW)"))
oxydeltwater <- expression(paste(delta^{18}, "O"[sw], " (‰ V-SMOW)"))
# Plotting
ggplot(V1075_MCwater, aes(x = Mean_d18Owater, y = Taxon)) +
geom_point() +  # Add points for mean
geom_errorbarh(aes(xmin = Lower_95_CI, xmax = Upper_95_CI), height = 0.2) +  # Add horizontal error bars
labs(x = oxydeltwater, y = element_blank()) +  # Label x and y axes
theme_minimal() +  # Set minimal theme
scale_x_continuous(breaks = seq(0, -10, by = -1)) +
theme(panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=1),  # Remove background
axis.text.x = element_text(color= "black", size=8),
axis.text.y = element_text(color= "black", size=8, face = "italic"),
axis.ticks = element_line())
#using tiff() and dev.off
setwd("/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op/Exports")
tiff("gg_d18Ow_nodinos_small.tiff", units="in", width= 3.5, height= 3, res=500)
ggsave("gg_d18Ow_nodinos_small.tiff", units="in", width= 3.5, height= 3, dpi=500, compression = 'lzw')
dev.off()
# Install and load required packages
packages_to_install <- c("ggpubr", "gridExtra", "ggplot2", "knitr", "outliers", "dplyr", "readr")
if (length(setdiff(packages_to_install, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages_to_install, rownames(installed.packages())))
}
library(gridExtra)
library(ggpubr)
library(knitr)
library(ggplot2)
library(outliers)
library(dplyr)
# Here are custom delta notation objects
oxydeltphosphate <- expression("δ"^18 * "O"[phosphate] * "(‰ V-SMOW)")
oxydeltwater <- expression("δ"^18 * "O"[water] * "(‰ V-SMOW)")
# Read in raw data
#V1075raw_githubURL <- "https://github.com/mattgeo1990/1075_Vertebrate_d18Op/blob/main/Data/V1075_PhosphateData_8-18-23_copy.csv"
#V107_raw <- read.csv(V1075raw_githubURL)
# Read in cleaned data (include link to script that cleans the data?)
# Call V1075_cl from GitHub
# cleaning script is here: https://github.com/mattgeo1990/1075_Vertebrate_d18Op/blob/main/Code/V1075_d18O.R
# V1075cl_githubURL <- "https://github.com/mattgeo1990/1075_Vertebrate_d18Op/blob/main/Data/V1075_cl.csv"
# V1075_cl <- read.csv(V1075cl_githubURL)
# For now, just source from local
setwd("/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op/Data")
V1075_BySpec <- read.csv("V1075_BySpec_water.csv")
NIST120c <- read.csv("V1075_NIST120c.csv")
V1075_MCwater <- read.csv("/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op/Data/d18Owater_MCsim_summary.csv")
#V1075_MCwater <- read.csv("V1075_MCwater.csv")
V1075_alldata <- read.csv("V1075_PhosphateData_8-18-23_copy.csv")
# Water by Taxon -----------------------------------------------------------------------
# Remove gar, sharks, and dinosaurs
# The fish can't inform water estimates because body temp is variable
# dinosaur d18Owater can't be reliably reconstructed because there is no framework (Kohn's mammal equations aren't a good fit, and we have to assume humidity if we use those anyways)
V1075_MCwater$Taxon[which(V1075_MCwater$Taxon == "crocA")] <- "Neosuchian A"
V1075_MCwater$Taxon[which(V1075_MCwater$Taxon == "crocB")] <- "Neosuchian B"
V1075_MCwater$Taxon[which(V1075_MCwater$Taxon == "crocG")] <- "Neosuchian G"
# Define the conditions for assigning values to the "Habitat" column
V1075_MCwater$Habitat <- ifelse(V1075_MCwater$Taxon %in% c("Glyptops", "crocG", "crocB"), "Amphibious",
ifelse(V1075_MCwater$Taxon %in% c("Naomichelys", "crocA"), "Terrestrial", NA))
# Display the modified data frame
#V1075_MCwater
#V1075_MCwater$PlotOrder <-
# Reorder Taxon based on Habitat
V1075_MCwater$Taxon <- factor(V1075_MCwater$Taxon, levels = unique(V1075_MCwater$Taxon[order(V1075_MCwater$Habitat)]))
# Plotting
ggplot(V1075_MCwater, aes(x = Mean_d18Owater, y = Taxon)) +
geom_point() +  # Add points for mean
geom_errorbarh(aes(xmin = Lower_95_CI, xmax = Upper_95_CI), height = 0.2) +  # Add horizontal error bars
labs(x = "d18Owater", y = "Taxon")  # Label x and y axes
# create delta notation for label
oxydeltphosphate <- expression(paste(delta^{18}, "O"[p], " (‰ V-SMOW)"))
oxydeltwater <- expression(paste(delta^{18}, "O"[sw], " (‰ V-SMOW)"))
# Plotting
ggplot(V1075_MCwater, aes(x = Mean_d18Owater, y = Taxon)) +
geom_point() +  # Add points for mean
geom_errorbarh(aes(xmin = Lower_95_CI, xmax = Upper_95_CI), height = 0.2) +  # Add horizontal error bars
labs(x = oxydeltwater, y = element_blank()) +  # Label x and y axes
theme_minimal() +  # Set minimal theme
scale_x_continuous(breaks = seq(0, -10, by = -1)) +
theme(panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=1),  # Remove background
axis.text.x = element_text(color= "black", size=8),
axis.text.y = element_text(color= "black", size=8, face = "italic"),
axis.ticks = element_line())
#using tiff() and dev.off
setwd("/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op/Exports")
tiff("gg_d18Ow_nodinos_small.tiff", units="in", width= 3.5, height= 3, res=500)
ggsave("gg_d18Ow_nodinos_small.tiff", units="in", width= 3.5, height= 3, dpi=500, compression = 'lzw')
dev.off()
# all water by taxon ------------------------------------------------------
# Looking for the plot with all the taxa water reconstructions?
# I removed it because we are no longer including dinosaurs and fish in the reconstructions
# See first round reviewers comments on 1075 Frontiers manuscript
# Also see comments above in "Water by Taxon" section
# d18O by Specimen --------------------------------------------------------
library(ggplot2)
# Create the plot
ggplot(V1075_BySpec, aes(x = d18O, y = Taxon)) +
geom_jitter(width = 0.2, height = 0, size = 3, alpha = 0.7) +
theme_minimal() +
labs(x = "d18O", y = "Taxon") +
theme(strip.placement = "outside")
# Calculate mean d18O by eco_type
mean_d18O_by_Taxon <- V1075_BySpec %>%
group_by(Taxon) %>%
summarise(mean_d18O = mean(d18O..VSMOW., na.rm = TRUE)) %>%
arrange(mean_d18O)
# Reorder eco_type levels based on mean d18O
V1075_BySpec$Taxon <- factor(V1075_BySpec$Taxon, levels = mean_d18O_by_Taxon$Taxon)
mean_d18O_by_Taxon <- V1075_BySpec %>%
group_by(Taxon) %>%
summarise(mean_d18O = mean(d18O..VSMOW., na.rm = TRUE)) %>%
arrange(mean_d18O)
V1075_BySpec
View(V1075_MCdata)
table(V1075_BySpec$Taxon)
table(V1075_MCdata$Taxon)
gar
str(gar)
