packages <- c("dplyr", "ggplot2", "readr", "magrittr", "tidyr", "purrr")
# Create function to check, install, and load packages
check_and_install_packages <- function(packages) {
missing_packages <- setdiff(packages, installed.packages()[,"Package"])
if (length(missing_packages) > 0) install.packages(missing_packages, dependencies = TRUE)
sapply(packages, function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
message(paste("Installing and loading", pkg))
install.packages(pkg, dependencies = TRUE)
}
library(pkg, character.only = TRUE)
})
}
# Run the package function
check_and_install_packages(packages)
# Data
# GitHub raw URL for the CSV file
github_url <- "https://raw.githubusercontent.com/mattgeo1990/1075_Vertebrate_d18Op/main/Data/V1075_BySpec.csv"
# Read the CSV file into a data frame
V1075_BySpec <- read_csv(github_url)
str(V1075_BySpec)
# READ IN NIST120c STD d18Op VALUES FROM RUN 1 and RUN 2
# NEED NIST120C STD d18Op from Run 3!!!!!
standards_githubURL <-"https://raw.githubusercontent.com/mattgeo1990/1075_Vertebrate_d18Op/main/Data/V1075_NIST120c.csv"
NIST120c <- read_csv(standards_githubURL)
# check for outliers
hist(NIST120c$d.18O.16O)
# gather stats
sd(NIST120c$d.18O.16O)
NIST120c_mean <- mean(NIST120c$d.18O.16O)
# Setup
# Omit Large Theropod and Sharks. Too few data and possible diagenetic influence
V1075_MC <- subset(V1075_BySpec, eco_type != "Large Theropod" & eco_type != "Shark")
# Group by eco_type
grouped_data <- V1075_MC %>% group_by(eco_type)
# Look at your data
# Plotting a panel of histograms with consistent bin sizes and performing normality tests
p <- ggplot(grouped_data, aes(x = d18O, fill = eco_type)) +
geom_histogram(binwidth = 1, color = "black", alpha = 0.7) +
labs(title = "Histogram of d18O by eco_type",
x = "d18O",
y = "Frequency") +
theme_minimal() +
facet_wrap(~eco_type, scales = "free")
# Perform Shapiro-Wilk test for normality for each eco_type
shapiro_tests <- by(grouped_data$d18O, grouped_data$eco_type, shapiro.test)
# Display normality test results
cat("\nNormality Tests:\n")
print(shapiro_tests)
# Extract p-values from the test results
p_values <- sapply(shapiro_tests, function(x) x$p.value)
# Highlight non-normally distributed groups (p-value < 0.05)
non_normal_groups <- names(p_values[p_values < 0.05])
cat("\nNon-normally distributed groups:", ifelse(length(non_normal_groups) > 0, paste(non_normal_groups, collapse = ", "), "None"), "\n")
# Print the ggplot object
print(p)
# Simulate dataset ------------------------------------------------------
# Function to generate simulated dataset for a given eco_type
simulate_eco_type <- function(subset_data, n_simulations = 1000) {
mean_val <- mean(subset_data$d18O)
sd_val <- sd(subset_data$d18O)
simulated_values <- replicate(n_simulations, rnorm(1, mean_val, sd_val))
return(simulated_values)
}
# Generate simulated datasets for each eco_type
simulated_data <- grouped_data %>%
summarise(simulated_d18O = list(simulate_eco_type(cur_data(), n_simulations = 1000))) %>%
unnest(simulated_d18O)
# Check the structure of the simulated_data
str(simulated_data)
# Plot histograms of the simulated data to compare against the empirical data
ggplot(simulated_data, aes(x = simulated_d18O, fill = eco_type)) +
geom_histogram(binwidth = 0.2, position = "identity", alpha = 0.7) +
labs(title = "Simulated Histograms of d18O by eco_type", x = "Simulated d18O", y = "Frequency") +
scale_fill_manual(values = c("A" = "blue", "B" = "green")) +
facet_wrap(~eco_type, scales = "free") +
theme_minimal()
# Resampling simulated data--------------------------------------------------------------
# Function to generate resamples for a given eco_type
generate_resamples <- function(subset_data, sample_sizes = c(5, 10, 15, 20), n_resamples = 1000) {
resampled_data <- lapply(sample_sizes, function(sample_size) {
resamples <- replicate(n_resamples, sample(subset_data$d18O, size = sample_size, replace = TRUE))
means <- colMeans(resamples)
variances <- apply(resamples, 2, var)
standard_errors <- apply(resamples, 2, function(x) sd(x) / sqrt(length(x)))
standard_deviations <- apply(resamples, 2, sd)
data.frame(
sample_size = rep(sample_size, each = n_resamples),
sim_d18Op_mean = means,
sim_d18Op_var = variances,
sim_d18Op_SE = standard_errors,
sim_d18Op_SD = standard_deviations
)
})
return(do.call(rbind, resampled_data))
}
# Generate resamples for each eco_type
resampled_data <- grouped_data %>%
group_modify(~ generate_resamples(.x, n_resamples = 1000))
# Assuming resampled_data is the output from generate_resamples function
resamples <- list()
sample_sizes <- unique(resampled_data$sample_size)
for (size in sample_sizes) {
resamples[[paste0("sample_size_", size)]] <- subset(resampled_data, sample_size == size)
}
# Now, each subset is stored in resamples list
# Access them using resamples$sample_size_5, subsetted_data$sample_size_10, etc.
# Simulated resampling of NIST120c d18O data
# NEED TO RUN MONTE CARLO ON NIST120c
# Dual-taxon Temperature Estimates -----------------------------------------------------
# Define d18Omw functions
# d18Omw from croc d18Op (Amiot et al., 2007)
crocwater <- function(mean_d18Op) {
result <- 0.82 * mean_d18Op - 19.93
return(data.frame(d18Omw = result))
}
# d18Omw from turtle d18Op (Barrick et al., 1999)
turtlewater <- function(mean_d18Op) {
result <- 1.01 * mean_d18Op - 22.3
return(data.frame(d18Omw = result))
}
# Subset sim data by eco_type
# Croc G
# Subset resamples and extract Croc G rows
croc_subsets <- lapply(resamples, function(df) subset(df, eco_type == "Croc G"))
# Combine the Croc G subsets into a single data frame
sim_croc <- do.call(rbind, croc_subsets)
# Add d18Omw column to sim_croc
sim_croc$d18Omw <- NA
# Aquatic Turtle
# Subset resamples and extract Aquatic Turtle rows
turtle_subsets <- lapply(resamples, function(df) subset(df, eco_type == "Aquatic Turtle"))
# Combine the Aquatic Turtle subsets into a single data frame
sim_turtle <- do.call(rbind, turtle_subsets)
# Add d18Omw column to sim_turtle
sim_turtle$d18Omw <- NA
# Compute d18Omw from turtle d18Op
sim_turtle$d18Omw <- turtlewater(sim_turtle$sim_d18Op_mean)$d18Omw
# Compute d18Omw from croc d18Op
sim_croc$d18Omw <- crocwater(sim_croc$sim_d18Op_mean)$d18Omw
# Run t-test between croc and turtle d18Omw
# List to store t-test results for each sample_size
t_test_results <- list()
# Iterate over each sample_size
for (size in sample_sizes) {
# Subset sim_croc and sim_turtle for the current sample_size
croc_subset <- subset(sim_croc, sample_size == size)
turtle_subset <- subset(sim_turtle, sample_size == size)
# Perform t-test
t_test_result <- t.test(croc_subset$d18Omw, turtle_subset$d18Omw)
# Store the t-test result in the list
t_test_results[[paste0("sample_size_", size)]] <- t_test_result
}
# Check if all p-values are less than 0.05
all_p_values_less_than_05 <- all(sapply(t_test_results, function(result) result$p.value < 0.05))
# Print message based on the result
if (all_p_values_less_than_05) {
cat("d18Omw distributions do not differ (p-values < 0.05)\n")
} else {
cat("At least one pair of d18Omw distributions differs (at least one p-value >= 0.05)\n")
}
# Plot histograms to look at d18Omw distributions
# Combine sim_croc and sim_turtle into a single data frame for easier plotting
combined_data <- rbind(cbind(sim_croc, species = "Croc"), cbind(sim_turtle, species = "Turtle"))
# Plot histograms for each combination of eco_type and sample_size
plot_panel <- ggplot(combined_data, aes(x = d18Omw, fill = species)) +
geom_histogram(binwidth = 1, position = "dodge", alpha = 0.7) +
facet_grid(eco_type ~ sample_size, scales = "free") +
labs(title = "Histogram of d18Omw for Simulated Croc and Turtle Data",
x = "d18Omw", y = "Frequency") +
theme_minimal()
# Display the plot
print(plot_panel)
# Compute temperature distribution from turtle d18Omw
# Subset resamples and extract Fish rows
fish_subsets <- lapply(resamples, function(df) subset(df, eco_type == "Fish"))
# Combine the Fish subsets into a single data frame
sim_fish <- do.call(rbind, fish_subsets)
# Create fishtemp function (Puceat et al., 2010)
fishtemp <- function(fish_d18Op, NIST120c_mean, d18Omw) {
temp <- 118.7 - 4.22 * ((fish_d18Op + (22.6 - NIST120c_mean)) - d18Omw)
return(temp)
}
# Create a data frame to hold dual-taxon temperature values
dual_taxon_temps <- data.frame()
# Iterate over each sample size
for (size in sample_sizes) {
# Subset sim_croc and sim_fish for the current sample size
croc_subset <- subset(sim_croc, sample_size == size)
fish_subset <- subset(sim_fish, sample_size == size)
# Iterate over each combination of sim_fish$sim_d18Op_mean and sim_croc$d18Omw
for (i in seq_along(fish_subset$sim_d18Op_mean)) {
for (j in seq_along(croc_subset$d18Omw)) {
# Run fishtemp function for each combination
temp_value <- fishtemp(fish_subset$sim_d18Op_mean[i], NIST120c_mean, croc_subset$d18Omw[j])
# Create a data frame with the results
temp_df <- data.frame(
Sample_Size = size,
Eco_Type_d18Omw = croc_subset$eco_type[j],
d18Omw_Value = croc_subset$d18Omw[j],
d18Op_Value = fish_subset$sim_d18Op_mean[i],
Dual_Taxon_Temp = temp_value
)
# Append the results to the dual_taxon_temps data frame
dual_taxon_temps <- rbind(dual_taxon_temps, temp_df)
}
}
}
# Plot histograms for each combination of eco_type and sample_size
plot_panel <- ggplot(combined_data, aes(x = d18Omw, fill = species)) +
geom_histogram(binwidth = 0.25, position = "dodge", alpha = 0.7) +
facet_grid(eco_type ~ sample_size, scales = "free") +
labs(title = "Histogram of d18Omw for Simulated Croc and Turtle Data",
x = "d18Omw", y = "Frequency") +
theme_minimal()
# Display the plot
print(plot_panel)
# Subset resamples and extract Fish rows
fish_subsets <- lapply(resamples, function(df) subset(df, eco_type == "Fish"))
# Combine the Fish subsets into a single data frame
sim_fish <- do.call(rbind, fish_subsets)
# Create fishtemp function (Puceat et al., 2010)
fishtemp <- function(fish_d18Op, NIST120c_mean, d18Omw) {
temp <- 118.7 - 4.22 * ((fish_d18Op + (22.6 - NIST120c_mean)) - d18Omw)
return(temp)
}
# Create a data frame to hold dual-taxon temperature values
dual_taxon_temps <- data.frame()
# Initialize an empty data frame to store results
dual_taxon_temps <- data.frame()
# Loop over each unique sample size
for (current_size in unique(sample_sizes)) {
# Subset data for the current sample size in croc_subsets
current_croc_subset <- croc_subsets[[as.character(current_size)]]
# Subset data for the current sample size in fish_subsets
current_fish_subset <- fish_subsets[[as.character(current_size)]]
# Check if both subsets have data
if (!is.null(current_croc_subset) && !is.null(current_fish_subset)) {
# Generate all combinations of sim_d18Op_mean and d18Omw for the current sample size
combinations <- expand.grid(
sim_d18Op_mean = current_fish_subset$sim_d18Op_mean,
d18Omw = current_croc_subset$d18Omw
)
# Run fishtemp function for each combination
temp_values <- mapply(fishtemp, combinations$sim_d18Op_mean, NIST120c_mean, combinations$d18Omw)
# Create a data frame with the results for the current sample size
temp_df <- data.frame(
Sample_Size = current_size,
Eco_Type_d18Omw = current_croc_subset$eco_type,
d18Omw_Value = combinations$d18Omw,
d18Op_Value = combinations$sim_d18Op_mean,
Dual_Taxon_Temp = temp_values
)
# Append the results to the overall data frame
dual_taxon_temps <- rbind(dual_taxon_temps, temp_df)
}
}
# Initialize a list to store results
result_list <- list()
# Loop over each unique sample size
for (current_size in unique(sample_sizes)) {
# Subset data for the current sample size in croc_subsets
current_croc_subset <- croc_subsets[[as.character(current_size)]]
# Subset data for the current sample size in fish_subsets
current_fish_subset <- fish_subsets[[as.character(current_size)]]
# Check if both subsets have data
if (!is.null(current_croc_subset) && !is.null(current_fish_subset)) {
# Generate all combinations of sim_d18Op_mean and d18Omw for the current sample size
combinations <- expand.grid(
sim_d18Op_mean = current_fish_subset$sim_d18Op_mean,
d18Omw = current_croc_subset$d18Omw
)
# Run fishtemp function for each combination
temp_values <- mapply(fishtemp, combinations$sim_d18Op_mean, NIST120c_mean, combinations$d18Omw)
# Create a data frame with the results for the current sample size
temp_df <- data.frame(
Sample_Size = current_size,
Eco_Type_d18Omw = current_croc_subset$eco_type,
d18Omw_Value = combinations$d18Omw,
d18Op_Value = combinations$sim_d18Op_mean,
Dual_Taxon_Temp = temp_values
)
# Store the data frame in the list
result_list[[as.character(current_size)]] <- temp_df
}
}
# Combine all data frames into one
dual_taxon_temps <- do.call(rbind, result_list)
# Set number of Monte Carlo repetitions
nMCrepetitions <- 1e5
# Subset V1075_GarTurtle into gar and turtle matrices
gar <- subset(V1075_GarTurtle, eco_type == "Fish")
turtle <- subset(V1075_GarTurtle, eco_type == "Aquatic Turtle")
synth_gar <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>%
mutate(means = mean(sample(gar$d18O, replace = TRUE)))
synth_turtle <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>%
mutate(means = mean(sample(turtle$d18O, replace = TRUE)))
synth_NIST <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>%
mutate(means = mean(sample(NIST120c$d.18O.16O, replace = TRUE)))
# create function
turtlewater <- function(synthmeans_turtle){
1.01 *(synthmeans_turtle) - 22.3 #Barrick et al. (1999)
}
# run turtlewater on synth_turtle
synth_turtle <- synth_turtle %>%
mutate(d18Owater = turtlewater(means))
# calculate temps
# define temp function
TempFun <- function(d18Ofish, NISTmean, d18Owater) {
temp <- 118.7 - 4.22*((d18Ofish  +(22.6 - NISTmean)) - d18Owater)
}
# run TempFun over all the synthetic means
synth_temps <- TempFun(d18Ofish = synth_gar$means,
NISTmean = synth_NIST$means,
d18Owater = synth_turtle$d18Owater)
# plot temps
ggplot(data = data.frame(temperature = synth_temps), aes(x = temperature)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Temperatures",
x = "Temperature",
y = "Frequency")
sample.mean <- mean(synth_temps)
sample.n <- length(synth_temps)
sample.sd <- sd(synth_temps)
sample.se <- sample.sd/sqrt(sample.n)
print(sample.se)
# Set number of Monte Carlo repetitions
nMCrepetitions <- 1e5
# Subset V1075_GarTurtle into gar and turtle matrices
gar <- subset(V1075_GarTurtle, eco_type == "Fish")
# Packages
library(dplyr)
library(purrr)
library(ggplot2)
# Data
# Call d18Op data from GitHub, cleaned and averaged per specimen (V1075_BySpec.csv)
samples_githubURL <- "https://github.com/mattgeo1990/1075_Vertebrate_d18Op/blob/main/Data/V1075_GarTurtle"
V1075_GarTurtle <- read.csv(samples_githubURL)
# Data
# Call d18Op data from GitHub, cleaned and averaged per specimen (V1075_BySpec.csv)
samples_githubURL <- "https://github.com/mattgeo1990/1075_Vertebrate_d18Op/blob/main/Data/V1075_GarTurtle"
V1075_GarTurtle <- read.csv(samples_githubURL)
library(RCurl)
V1075_GarTurtle <- read.csv(text = samples_githubURL)
samples_githubURL <- getURL("https://raw.githubusercontent.com/mattgeo1990/1075_Vertebrate_d18Op/main/Data/V1075_GarTurtle")
V1075_GarTurtle <- read.csv(text = samples_githubURL)
# READ IN NIST120c STD d18Op VALUES FROM RUN 1 and RUN 2
# NEED NIST120C STD d18Op from Run 3!!!!!
standards_githubURL <- getURL("https://raw.githubusercontent.com/mattgeo1990/1075_Vertebrate_d18Op/main/Data/V1075_NIST120c.csv")
NIST120c <- read.csv(standards_githubURL)
# READ IN NIST120c STD d18Op VALUES FROM RUN 1 and RUN 2
# NEED NIST120C STD d18Op from Run 3!!!!!
standards_githubURL <- getURL("https://raw.githubusercontent.com/mattgeo1990/1075_Vertebrate_d18Op/main/Data/V1075_NIST120c.csv")
NIST120c <- read.csv(text = standards_githubURL)
packages <- c("dplyr", "purrr", "ggplot2", "Rcurl")
if (!require("pacman")) install.packages("pacman")
install.packages("pacman")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(packages)
# Combine data frames into one
combined_data <- rbind(
data.frame(group = "Gar", values = synth_gar$means),
data.frame(group = "Turtle", values = synth_turtle$means),
data.frame(group = "NIST", values = synth_NIST$means)
)
synth_gar <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>%
mutate(means = mean(sample(gar$d18O, replace = TRUE)))
# Data
# Call d18Op data from GitHub, cleaned and averaged per specimen (V1075_BySpec.csv)
samples_githubURL <- getURL("https://raw.githubusercontent.com/mattgeo1990/1075_Vertebrate_d18Op/main/Data/V1075_GarTurtle")
V1075_GarTurtle <- read.csv(text = samples_githubURL)
# READ IN NIST120c STD d18Op VALUES FROM RUN 1 and RUN 2
# NEED NIST120C STD d18Op from Run 3!!!!!
standards_githubURL <- getURL("https://raw.githubusercontent.com/mattgeo1990/1075_Vertebrate_d18Op/main/Data/V1075_NIST120c.csv")
NIST120c <- read.csv(text = standards_githubURL)
# Set number of Monte Carlo repetitions
nMCrepetitions <- 1e5
# Subset V1075_GarTurtle into gar and turtle matrices
gar <- subset(V1075_GarTurtle, eco_type == "Fish")
turtle <- subset(V1075_GarTurtle, eco_type == "Aquatic Turtle")
synth_gar <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>%
mutate(means = mean(sample(gar$d18O, replace = TRUE)))
synth_turtle <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>%
mutate(means = mean(sample(turtle$d18O, replace = TRUE)))
synth_NIST <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>%
mutate(means = mean(sample(NIST120c$d.18O.16O, replace = TRUE)))
# Combine data frames into one
combined_data <- rbind(
data.frame(group = "Gar", values = synth_gar$means),
data.frame(group = "Turtle", values = synth_turtle$means),
data.frame(group = "NIST", values = synth_NIST$means)
)
ggplot(combined_data, aes(x = values, fill = group)) +
geom_histogram(position = "identity", alpha = 0.7, bins = 30, color = "black") +
labs(title = "Histogram of Means",
x = "Means",
y = "Frequency") +
theme_minimal() +
facet_wrap(~group, scales = "free")
# Plotting with ggplot2 using facet_wrap
ggplot(combined_data, aes(x = values, fill = group)) +
geom_histogram(position = "identity", alpha = 0.7, bins = 30, color = "black") +
labs(title = "Histogram of Means",
x = "Means",
y = "Frequency") +
theme_minimal() +
facet_wrap(~group, scales = "free")
# Set order of facets
combined_data$group <- factor(combined_data$group, levels = c("Gar", "Turtle", "NIST"))
# Plotting with ggplot2 using facet_wrap
ggplot(combined_data, aes(x = values, fill = group)) +
geom_histogram(position = "identity", alpha = 0.7, bins = 30, color = "black") +
labs(title = "Histogram of Means",
x = "Means",
y = "Frequency") +
theme_minimal() +
facet_wrap(~group, scales = "free")
knitr::opts_chunk$set(echo = TRUE)
# Packages
packages <- c("dplyr", "purrr", "ggplot2", "Rcurl")
install.packages(packages)
library(dplyr)
library(purrr)
library(ggplot2)
library(Rcurl)
# Packages
packages <- c("dplyr", "purrr", "ggplot2", "Rcurl")
# install.packages(packages)
library(dplyr)
library(purrr)
library(ggplot2)
library(Rcurl)
library(RCurl)
# Read Data -------------------------------
# Read raw sample data
setwd("/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op/Data/")
raw <- read.csv("V1075_PhosphateData_8-18-23_copy.csv")
Allosaur <- subset(raw, Taxon == "Carcharodontids")
Allosaur <- subset(raw, Taxon == "Carcharodontids")
unique(raw$Taxon)
Allosaur <- subset(raw, Taxon == "Carcharodontosaurid")
View(Allosaur)
View(Allosaur)
source("~/Documents/GitHub/1075_Vertebrate_d18Op/Code/V1075_d18O_wrangle.R", echo=TRUE)
source("~/Documents/GitHub/1075_Vertebrate_d18Op/V1075_MC_alltaxa.R", echo=TRUE)
source("~/Documents/GitHub/1075_Vertebrate_d18Op/Code/1075pubplots.R", echo=TRUE)
source("~/Documents/GitHub/1075_Vertebrate_d18Op/Code/V1075_d18O_wrangle.R", echo=TRUE)
source("~/Documents/GitHub/1075_Vertebrate_d18Op/V1075_MC_alltaxa.R", echo=TRUE)
source("~/Documents/GitHub/1075_Vertebrate_d18Op/V1075_MC_alltaxa.R", echo=TRUE)
source("~/Documents/GitHub/1075_Vertebrate_d18Op/Code/1075pubplots.R", echo=TRUE)
# V1075_MCwater is sourced from script "V1075_MC_alltaxa.R"
# V1075_BySpec is sourced from "V1075_d18O_wrangle.R"
# Install and load required packages
packages_to_install <- c("ggpubr", "gridExtra", "ggplot2", "knitr", "outliers", "dplyr", "readr")
if (length(setdiff(packages_to_install, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages_to_install, rownames(installed.packages())))
}
library(gridExtra)
library(ggpubr)
library(knitr)
library(ggplot2)
library(outliers)
library(dplyr)
# Here is a custom delta notation object
oxydeltphosphate <- expression("δ"^18 * "O"[phosphate] * "(‰ V-SMOW)")
# Read in raw data
#V1075raw_githubURL <- "https://github.com/mattgeo1990/1075_Vertebrate_d18Op/blob/main/Data/V1075_PhosphateData_8-18-23_copy.csv"
#V107_raw <- read.csv(V1075raw_githubURL)
# Read in cleaned data (include link to script that cleans the data?)
# Call V1075_cl from GitHub
# cleaning script is here: https://github.com/mattgeo1990/1075_Vertebrate_d18Op/blob/main/Code/V1075_d18O.R
# V1075cl_githubURL <- "https://github.com/mattgeo1990/1075_Vertebrate_d18Op/blob/main/Data/V1075_cl.csv"
# V1075_cl <- read.csv(V1075cl_githubURL)
# For now, just source from local
setwd("/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op/Data")
V1075_BySpec <- read.csv("V1075_BySpec.csv")
NIST120c <- read.csv("V1075_NIST120c.csv")
V1075_MCwater <- read.csv("V1075_MCwater.csv")
V1075_alldata <- read.csv("V1075_PhosphateData_8-18-23_copy.csv")
setwd("/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op/Exports")
tiff("gg_BySpec.tiff", units="in", width= 6.2, height= 2.7, res=500)
ggsave("gg_BySpec.tiff", units="in", width= 6.2, height= 2.7, dpi=500, compression = 'lzw')
dev.off()
# Reorder Taxon levels based on mean d18O
V1075_alldata$Taxon <- factor(V1075_alldata$Taxon, levels = mean_d18O_by_Taxon$Taxon)
# Create the plot with "Taxon" and open circles
ggplot(V1075_alldata, aes(x = d18O..VSMOW., y = Taxon)) +
geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.7, shape = 1) +  # Use shape = 1 for open circles
theme_minimal() +
ggtitle("V1075 individual d18Op measurements") +  # Add main title here
labs(x = oxydeltphosphate, y = "") +
theme(strip.placement = "outside",
panel.grid.major = element_blank(),  # Remove major gridlines
panel.grid.minor = element_blank(),  # Remove minor gridlines
panel.border = element_rect(color = "black", fill = NA),  # Set border color and remove fill
axis.ticks.x = element_line(color = "black"),  # Set x-axis ticks color
axis.ticks.y = element_line(color = "black"),  # Set y-axis ticks color
axis.text.x = element_text(size = 8, hjust = 1, face = "bold"),  # Set x-axis tick label size, orientation, and bold font
axis.text.y = element_text(size = 8, hjust = 1, face = "italic")) +  # Set y-axis tick label size, orientation, and bold font
coord_cartesian(expand = FALSE, xlim = c(8, 24), ylim = c(0, 12)) +
scale_x_continuous(breaks = seq(8, 24, by = 2))
setwd("/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op/Exports")
tiff("gg_alldata.tiff", units="in", width= 6.2, height= 2.7, res=500)
ggsave("gg_alldata.tiff", units="in", width= 6.2, height= 2.7, dpi=500, compression = 'lzw')
dev.off()
