)
# Create new column to store d18Obody_water
V1075_summary$d18Obody_water <- NA
# apply birdwater to dinosaurs
DinoWater <- V1075_summary %>%
mutate(d18Obody_water = ifelse(thermophysiology == "endotherm", birdwater(d18Op), d18Op))
# Compute mean d18Obody_water for endotherms
# Compute for each dinosaur group, use bird equation from Lazzerini et al. (2016)
# Define birdwater function
birdwater <- function(d18Op) {
return(1.077 * d18Op - 34.607)
}
# apply birdwater to dinosaurs
DinoWater <- V1075_summary %>%
mutate(d18Obody_water = ifelse(thermophysiology == "endotherm", birdwater(d18Op), d18Op))
# Compute mean d18Obody_water for endotherms
# Compute for each dinosaur group, use bird equation from Lazzerini et al. (2016)
# Define birdwater function
birdwater <- function(d18O) {
return(1.077 * d18O - 34.607)
}
# apply birdwater to dinosaurs
DinoWater <- V1075_summary %>%
mutate(d18Obody_water = ifelse(thermophysiology == "endotherm", birdwater(d18Op), d18Op))
# apply birdwater to dinosaurs
DinoWater <- V1075_summary %>%
mutate(d18Obody_water = ifelse(thermophysiology == "endotherm", birdwater(d18O), d18O))
DinoWater
# Create new column to store d18Obody_water
V1075_summary$d18Obody_water <- NA
# Compute mean d18Obody_water for endotherms
# Compute for each dinosaur group, use bird equation from Lazzerini et al. (2016)
# Define birdwater function
birdwater <- function(d18O) {
return(1.077 * d18O - 34.607)
}
# apply birdwater to dinosaurs
DinoWater <- V1075_summary %>%
mutate(d18Obody_water = ifelse(thermophysiology == "endotherm", birdwater(d18O), d18O))
DinoWater
# apply birdwater to dinosaurs
DinoWater <- V1075_summary %>%
mutate(d18Obody_water = ifelse(thermophysiology == "endotherm", birdwater(d18O)))
V1075_summary
# apply birdwater to dinosaurs
DinoWater <- V1075_summary %>%
mutate(d18Obody_water = ifelse(thermophysiology == "endotherm", birdwater(d18Opmean), d18Opmean))
DinoWater
V1075_summary
# apply birdwater to dinosaurs
V1075_summary <- V1075_summary %>%
mutate(d18Obody_water = ifelse(thermophysiology == "endotherm", birdwater(d18Opmean), d18Opmean))
V1075_summary
# Subset endotherms and ectotherms
Endo <- subset(V1075_summary, thermophysiology = "endotherm")
Ecto <- subset(V1075_summary, thermophysiology = "ectotherm")
# Gather mean for each eco_type
V1075_summary <- V1075_BySpec %>%
group_by(eco_type) %>%
summarise(
thermophysiology = first(thermophysiology),  # Assuming thermophysiology is constant within each eco_type
n = n(),
d18Opmean = mean(d18O, na.rm = TRUE)
)
# Subset endotherms and ectotherms
Endo <- subset(V1075_summary, thermophysiology = "endotherm")
Ecto <- subset(V1075_summary, thermophysiology = "ectotherm")
# Apply birdwater to dinosaurs
Endo <- Endo %>%
mutate(d18Obody_water = birdwater(d18Opmean))
Endo
# Subset endotherms and ectotherms
Endo <- subset(V1075_summary, thermophysiology = "endotherm")
Endo
# Gather mean for each eco_type
V1075_summary <- V1075_BySpec %>%
group_by(eco_type) %>%
summarise(
thermophysiology = first(thermophysiology),  # Assuming thermophysiology is constant within each eco_type
n = n(),
d18Opmean = mean(d18O, na.rm = TRUE)
)
V1075_summary
# Subset endotherms and ectotherms
Endo <- subset(V1075_summary, thermophysiology = "endotherm")
Endo
# Subset endotherms and ectotherms
Endo <- subset(V1075_summary, thermophysiology == "endotherm")
Ecto <- subset(V1075_summary, thermophysiology == "ectotherm")
Endo
Ecto <- subset(V1075_summary, thermophysiology == "ectotherm")
# Compute mean d18Obody_water for endotherms
# Compute for each dinosaur group, use bird equation from Lazzerini et al. (2016)
# Define birdwater function
birdwater <- function(d18O) {
return(1.077 * d18O - 34.607)
}
# Create new column in Endo to store d18Obody_water
V1075_summary$d18Obody_water <- NA
# Apply birdwater to dinosaurs
Endo <- Endo %>%
mutate(d18Obody_water = birdwater(d18Opmean))
Endo
# Take mean of endotherms and mean of ectotherms
endo_mean <- mean(Endo$d18Obody_water)
ecto_mean <- mean(Ecto$d18Opmean)
# Run EECM on means
EECM <- EECMfun(ecto_mean, NIST120c_mean, endo_mean)
# Compute EECM
# Define EECM function based on Cullen et al. (2019) and Puceat et al. (2010)
EECMfun <- function(d18Op_ecto, NIST120c_mean, d18Obw_endo) {
EECM = 118.7 - 4.22 * ((d18Op_ecto + (22.6 - NIST120c_mean)) - d18Obw_endo)
return(EECM)
}
# Run EECM on means
EECM <- EECMfun(ecto_mean, NIST120c_mean, endo_mean)
cat("Temperature Estimates:\n",
"Dual-Taxon Croc-Fish:", round(CrocFish_temp, 1), "\n",
"Dual-Taxon Turtle-Fish:", round(TurtleFish_temp, 1), "\n",
"EECM:", round(EECM, 1), "\n")
# Define EECM based on Cullen et al. (2019)
EECM2019 <- function(d18Op_ecto, d18Obw_endo) {
EECM19 <- 111.4 - ( 4.3 * ( (d18Op_ecto) - (d18Ow_endo) ))
}
# Run EECM on means
EECM23 <- EECM2023(ecto_mean, NIST120c_mean, endo_mean)
EECM19 <- EECM2019(ecto_mean, endo_mean)
# Run EECM on means
EECM23 <- EECM2023(d18Op_ecto, NIST120c_mean, d18Obw_endo)
# Compute EECM
# Define EECM function based on Cullen et al. (2019) and Puceat et al. (2010)
EECM2023 <- function(d18Op_ecto, NIST120c_mean, d18Obw_endo) {
EECM23 = 118.7 - 4.22 * ((d18Op_ecto + (22.6 - NIST120c_mean)) - d18Obw_endo)
return(EECM)
}
# Define EECM based on Cullen et al. (2019)
EECM2019 <- function(d18Op_ecto, d18Obw_endo) {
EECM19 <- 111.4 - ( 4.3 * ( (d18Op_ecto) - (d18Ow_endo) ))
}
# Run EECM on means
EECM23 <- EECM2023(d18Op_ecto, NIST120c_mean, d18Obw_endo)
EECM19 <- EECM2019(ecto_mean, endo_mean)
# Compute EECM
# Define EECM function based on Cullen et al. (2019) and Puceat et al. (2010)
EECM2023 <- function(d18Op_ecto, NIST120c_mean, d18Obw_endo) {
EECM23 = 118.7 - 4.22 * ((d18Op_ecto + (22.6 - NIST120c_mean)) - d18Obw_endo)
return(EECM)
}
# Define EECM based on Cullen et al. (2019)
EECM2019 <- function(d18Op_ecto, d18Obw_endo) {
EECM19 <- 111.4 - ( 4.3 * ( (d18Op_ecto) - (d18Obw_endo) ))
}
# Run EECM on means
EECM23 <- EECM2023(ecto_mean, NIST120c_mean, endo_mean)
EECM19 <- EECM2019(ecto_mean, endo_mean)
cat("Temperature Estimates:\n",
"Dual-Taxon Croc-Fish:", round(CrocFish_temp, 1), "\n",
"Dual-Taxon Turtle-Fish:", round(TurtleFish_temp, 1), "\n",
"EECM19:", round(EECM19, 1), "\n",
"EECM23:", round(EECM19, 1), "\n")
cat("Temperature Estimates:\n",
"Dual-Taxon Croc-Fish:", round(CrocFish_temp, 1), "\n",
"Dual-Taxon Turtle-Fish:", round(TurtleFish_temp, 1), "\n",
"EECM19:", round(EECM19, 1), "\n",
"EECM23:", round(EECM23, 1), "\n")
sd(NIST120c)
sd(NIST120c$d.18O.16O)
packages_to_install <- c("ggpubr", "gridExtra", "ggplot2", "knitr", "outliers", "dplyr")
if (length(setdiff(packages_to_install, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages_to_install, rownames(installed.packages())))
}
library(gridExtra)
library(ggpubr)
library(knitr)
library(ggplot2)
library(outliers)
library(dplyr)
# Read Data -------------------------------
# Read raw sample data
setwd("/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op/Data/")
raw <- read.csv("V1075_PhosphateData_8-18-23_copy.csv")
setwd("/Users/allen/Documents/Data Analysis/Data/Geochem")
NIST120c <- read.csv("V1075_NIST120c_Run1&2.csv")
# check for outliers
hist(NIST120c$d.18O.16O)
# identified a single outlier. Why just this one bust? Anyways, omit it.
NIST120c <- subset(NIST120c, NIST120c$d.18O.16O > 20)
hist(NIST120c$d.18O.16O)
# looks good, now export
setwd("/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op/Data")
write.csv(NIST120c, "V1075_NIST120c.csv", row.names = FALSE)
# Define a vector of unique categories in the "Eco" column
eco_categories <- unique(raw$Eco)
# Create an empty list to store the test results
test_results <- list()
# Perform Grubbs' test for each category
for (category in eco_categories) {
subset_data <- raw$d18O..VSMOW.[which(raw$Eco %in% category)]
test <- grubbs.test(subset_data)
test_results[[category]] <- test
}
# Print the results
for (category in eco_categories) {
cat("Grubbs' Test for", category, ":\n")
print(test_results[[category]])
cat("\n")
}
# Perform Grubbs' test for each category
for (category in eco_categories) {
subset_data <- raw$d18O..VSMOW.[which(raw$Eco %in% category)]
test <- grubbs.test(subset_data)
test_results[[category]] <- test
}
if (length(subset_data) > 0) {
test <- grubbs.test(subset_data)
test_results[[category]] <- test
} else {
# Handle the case when the subset is empty
}
# Perform Grubbs' test for each category
for (category in eco_categories) {
subset_data <- raw$d18O..VSMOW.[which(raw$Eco %in% category)]
test <- grubbs.test(subset_data)
test_results[[category]] <- test
}
if (length(subset_data) > 0) {
test <- grubbs.test(subset_data)
test_results[[category]] <- test
} else {
# Handle the case when the subset is empty
}
if (length(subset_data) > 0) {
test <- grubbs.test(subset_data)
test_results[[category]] <- test
} else {
# Handle the case when the subset is empty
}
# Define a vector of unique categories in the "Eco" column
eco_categories <- unique(raw$Eco)
# Create an empty list to store the test results
test_results <- list()
if (length(subset_data) > 0) {
test <- grubbs.test(subset_data)
test_results[[category]] <- test
} else {
# Handle the case when the subset is empty
}
# Perform Grubbs' test for each category
for (category in eco_categories) {
subset_data <- raw$d18O..VSMOW.[which(raw$Eco %in% category)]
test <- grubbs.test(subset_data)
test_results[[category]] <- test
}
# Create an empty list to store the test results
test_results <- list()
# Iterate over each category in eco_categories
for (category in eco_categories) {
# Extract subset of data based on the category
subset_data <- raw$d18O..VSMOW.[raw$Eco %in% category]
# Perform Grubbs' test
test <- grubbs.test(subset_data)
# Store the test result in the list
test_results[[category]] <- test
}
# Create an empty list to store the test results
test_results <- list()
# Create an empty list to store the test results
test_results <- list()
# Split the data by unique values in the "Eco" column
eco_splits <- split(raw$d18O..VSMOW., raw$Eco)
# Iterate over each unique Eco value
for (category in names(eco_splits)) {
# Extract subset of data based on the Eco value
subset_data <- eco_splits[[category]]
# Perform Grubbs' test
test <- grubbs.test(subset_data)
# Store the test result in the list
test_results[[category]] <- test
}
View(raw)
# Read Data -------------------------------
# Read raw sample data
setwd("/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op/Data/")
raw <- read.csv("V1075_PhosphateData_8-18-23_copy.csv")
# Define a vector of unique categories in the "Eco" column
eco_categories <- unique(raw$Eco)
# Create an empty list to store the test results
test_results <- list()
# Perform Grubbs' test for each category
for (category in eco_categories) {
subset_data <- raw$d18O..VSMOW.[which(raw$Eco %in% category)]
test <- grubbs.test(subset_data)
test_results[[category]] <- test
}
# Print the results
for (category in eco_categories) {
cat("Grubbs' Test for", category, ":\n")
print(test_results[[category]])
cat("\n")
}
# Remove dentine samples
V1075_cl <- subset(V1075_cl, V1075_cl$Tissue != "dentine")
# Remove gar teeth
V1075_cl <- subset(V1075_cl, !(Eco == "Fish" & Element.type == "tooth"))
# outliers identified in Croc A, Small Theropod
V1075_cl <- subset(raw, raw$d18O..VSMOW. < 22.47)
# Remove dentine samples
V1075_cl <- subset(V1075_cl, V1075_cl$Tissue != "dentine")
# Remove gar teeth
V1075_cl <- subset(V1075_cl, !(Eco == "Fish" & Element.type == "tooth"))
# Remove groups with n < 5
table(V1075_cl$Eco)
V1075_cl <- V1075_cl[!(V1075_cl$Eco %in% c("Large Theropod", "Shark")), ]
# Remove groups with n < 5
table(V1075_cl$Eco)
# for each unique specimen in V1075, calculate mean of that specimen
# use dplyr to summarize by group, assign to new dataframe
V1075_BySpec <- group_by(V1075_cl, Specimen.ID)
# compute mean and n by specimen
V1075_mean <- summarize(V1075_BySpec, d18O = mean(d18O..VSMOW.), n = n()) # remember that n = n() command produces column with sample size for each group
SD <- summarize(V1075_BySpec, SD = sd(d18O..VSMOW.))
# clean and merge
# condense lit_data df to one row per unique specimen
V1075_BySpec <- V1075_BySpec[!duplicated(V1075_BySpec$Specimen.ID), ]
# remove unwanted columns
V1075_BySpec <- dplyr::select(V1075_BySpec, c(-1, -4:-8, -14:-26))
# merge condensed lit_data with summarized data
V1075_BySpec <- merge(V1075_BySpec,V1075_mean,by="Specimen.ID")
V1075_BySpec <- merge(V1075_BySpec,SD,by="Specimen.ID")
# calculate SE and merge with V1075_BySpec
V1075_BySpec <- mutate(V1075_BySpec, SE = (SD/sqrt(n)))
# rename columns consistent with lit_data dataset
names(V1075_BySpec)[names(V1075_BySpec) == "Eco"] <- "eco_type"
# All V1075_BySpec
setwd("/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op/Data")
V1075_BySpec <- V1075_BySpec[]
write.csv(V1075_BySpec, "V1075_BySpec.csv", row.names = FALSE)
# Just Gar and Turtle for dual-taxon temps
# subset gar and aquatic turtle
V1075_GarTurtle <- V1075_BySpec[(V1075_cl$Eco %in% c("Fish", "Aquatic Turtle")), ]
V1075_BySpec
# Just Gar and Turtle for dual-taxon temps
# subset gar and aquatic turtle
V1075_GarTurtle <- V1075_BySpec[(V1075_BySpec$eco_type %in% c("Fish", "Aquatic Turtle")), ]
table(V1075_GarTurtle$eco_type)
# export
write.csv(V1075_GarTurtle, "V1075_GarTurtle", row.names = FALSE)
# Remove unnecessary columns for Monte Carlo
colnames(V1075_BySpec)
V1075MC_data <- V1075_BySpec[, c("Specimen.ID", "eco_type", "d18O")]
View(V1075MC_data)
# Export V1075MC_data
write.csv(V1075MC_data, "V1075MC_data", row.names = FALSE)
# Export just Gar and Turtle for dual-taxon temps
# subset gar and aquatic turtle
V1075_GarTurtle <- V1075MC_data[(V1075MC_data$eco_type %in% c("Fish", "Aquatic Turtle")), ]
# check that it worked
table(V1075_GarTurtle$eco_type)
# export
write.csv(V1075_GarTurtle, "V1075_GarTurtle", row.names = FALSE)
# Set number of Monte Carlo repetitions
nMCrepetitions <- 1e5
data_frame(num = 1:100) %>%
group_by(num) %>%
mutate(means = mean(sample(gar, replace = TRUE))) %>%
ggplot(aes(x = means)) +
geom_freqpoly()
# Subset V1075_GarTurtle into gar and turtle matrices
gar <- subset(V1075_GarTurtle, eco_type = "Fish")
turtle <- subset(V1075_GarTurtle, eco_type = "Aquatic Turtle")
data_frame(num = 1:100) %>%
group_by(num) %>%
mutate(means = mean(sample(gar, replace = TRUE))) %>%
ggplot(aes(x = means)) +
geom_freqpoly()
data_frame(num = 1:100) %>%
group_by(num) %>%
mutate(means = mean(sample(gar$d18O, replace = TRUE))) %>%
ggplot(aes(x = means)) +
geom_freqpoly()
data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>%
mutate(means = mean(sample(gar$d18O, replace = TRUE))) %>%
ggplot(aes(x = means)) +
geom_freqpoly()
data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>%
mutate(means = mean(sample(turtle$d18O, replace = TRUE))) %>%
ggplot(aes(x = means)) +
geom_freqpoly()
synthmeans_gar <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>%
mutate(means = mean(sample(gar$d18O, replace = TRUE)))
synthmeans_turtle <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>%
mutate(means = mean(sample(turtle$d18O, replace = TRUE)))
synthmeans_NIST <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>%
mutate(means = mean(sample(NIST120c$d.18O.16O, replace = TRUE)))
turtlewater <- 1.01 *(AquaTurt_d18Op_mean) - 22.3 #Barrick et al. (1999)
# create function
turtlewater <- function(synthmeans_turtle){
1.01 *(synthmeans_turtle) - 22.3 #Barrick et al. (1999)
}
# run turtlewater on synthmeans_turtle
synthwater <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>% mutate(d18Owater = turtlewater(turtle$d180))
turtlewater(turtle$d180
turtle <- subset(V1075_GarTurtle, eco_type = "Aquatic Turtle")
turtle <- subset(V1075_GarTurtle, eco_type = "Aquatic Turtle")
V1075_GarTurtle
# Subset V1075_GarTurtle into gar and turtle matrices
gar <- subset(V1075_GarTurtle, eco_type == "Fish")
turtle <- subset(V1075_GarTurtle, eco_type == "Aquatic Turtle")
synthmeans_gar <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>%
mutate(means = mean(sample(gar$d18O, replace = TRUE)))
synthmeans_turtle <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>%
mutate(means = mean(sample(turtle$d18O, replace = TRUE)))
synthmeans_NIST <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>%
mutate(means = mean(sample(NIST120c$d.18O.16O, replace = TRUE)))
# create function
turtlewater <- function(synthmeans_turtle){
1.01 *(synthmeans_turtle) - 22.3 #Barrick et al. (1999)
}
# run turtlewater on synthmeans_turtle
synthwater <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>% mutate(d18Owater = turtlewater(turtle$d180))
# run turtlewater on synthmeans_turtle
synthwater <- data_frame(num = 1:nMCrepetitions) %>%
rowwise() %>%
mutate(d18Owater = turtlewater(turtle$d180))
turtle$d180
# run turtlewater on synthmeans_turtle
synthwater <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>% mutate(d18Owater = turtlewater(turtle$mean))
turtle$mean
# run turtlewater on synthmeans_turtle
synthwater <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>% mutate(d18Owater = turtlewater(synthmeans_turtle$means))
synthmeans_turtle$means
# run turtlewater on synthmeans_turtle
synthwater <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>% mutate(d18Owater = turtlewater(synthmeans_turtle$means))
# run turtlewater on synthmeans_turtle
synthwater <- data_frame(num = 1:nMCrepetitions) %>%
rowwise() %>%
mutate(d18Owater = turtlewater(means))
# run turtlewater on synthmeans_turtle
synthwater <- data_frame(num = 1:nMCrepetitions) %>%
rowwise() %>%
mutate(d18Owater = turtlewater(synthmeans_turtle$means))
# run turtlewater on synthmeans_turtle
synthwater <- data_frame(num = 1:nMCrepetitions) %>%
rowwise() %>%
mutate(d18Owater = list(turtlewater(synthmeans_turtle$means)))
# run turtlewater on synthmeans_turtle
synthwater <- data_frame(num = 1:nMCrepetitions) %>%
rowwise() %>%
mutate(d18Owater = turtlewater(synthmeans_turtle$means))
synth_gar <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>%
mutate(means = mean(sample(gar$d18O, replace = TRUE)))
synth_turtle <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>%
mutate(means = mean(sample(turtle$d18O, replace = TRUE)))
synth_NIST <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>%
mutate(means = mean(sample(NIST120c$d.18O.16O, replace = TRUE)))
# run turtlewater on synthmeans_turtle
synth_turtle <- mutate(d18Owater = turtlewater(synth_turtle$means))
# run turtlewater on synthmeans_turtle
synth_turtle <- synth_turtle %>%
mutate(d18Owater = turtlewater(means))
# calculate temps
# define temp function
TempFun <- function(d18Ofish, NISTmean, d18Owater) {
temp <- 118.7 - 4.22*((d18Ofish  +(22.6 - NISTmean)) - d18Owater)
}
synth_temps <- TempFun(d18Ofish = synth_gar$means,
NISTmean = synth_NIST$means,
d18Owater = synth_turtle$d18Owater)
# plot temps
ggplot(data = data.frame(temperature = synth_temps), aes(x = temperature)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Temperatures",
x = "Temperature",
y = "Frequency")
# Calculate the confidence interval
ci <- t.test(synth_temps)$conf.int
# Print the confidence interval
cat("95% Confidence Interval: [", ci[1], ", ", ci[2], "]\n")
# confidence intervals
sample.n <- length(synth_temps)
sample.sd <- sd(synth_temps)
sample.se <- sample.sd/sqrt(sample.n)
print(sample.se)
sample(gar$d18O, replace = TRUE)
sample(turtle$d18O, replace = TRUE)
alpha = 0.05
degrees.freedom = sample.n - 1
t.score = qt(p=alpha/2, df=degrees.freedom,lower.tail=F)
print(t.score)
margin.error <- t.score * sample.se
lower.bound <- sample.mean - margin.error
upper.bound <- sample.mean + margin.error
sample.mean <- mean(synth_temps)
lower.bound <- sample.mean - margin.error
upper.bound <- sample.mean + margin.error
print(c(lower.bound,upper.bound))
