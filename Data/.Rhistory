# condense lit_data df to one row per unique specimen
V1075_BySpec <- V1075_BySpec[!duplicated(V1075_BySpec$Specimen.ID), ]
# remove unwanted columns
V1075_BySpec <- dplyr::select(V1075_BySpec, c(-1, -4:-8, -14:-26))
# merge condensed lit_data with summarized data
V1075_BySpec <- merge(V1075_BySpec,V1075_mean,by="Specimen.ID")
V1075_BySpec <- merge(V1075_BySpec,SD,by="Specimen.ID")
# calculate SE and merge with V1075_BySpec
V1075_BySpec <- mutate(V1075_BySpec, SE = (SD/sqrt(n)))
# rename columns consistent with lit_data dataset
names(V1075_BySpec)[names(V1075_BySpec) == "Eco"] <- "eco_type"
# Set WD
setwd("/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op/Data")
# Export all V1075_BySpec
V1075_BySpec <- V1075_BySpec[]
write.csv(V1075_BySpec, "V1075_BySpec.csv", row.names = FALSE)
# Remove unnecessary columns for Monte Carlo
colnames(V1075_BySpec)
V1075MC_data <- V1075_BySpec[, c("Specimen.ID", "eco_type", "d18O")]
# Export V1075MC_data
write.csv(V1075MC_data, "V1075MC_data", row.names = FALSE)
# Export just Gar and Turtle for dual-taxon temps
# subset gar and aquatic turtle
V1075_GarTurtle <- V1075MC_data[(V1075MC_data$eco_type %in% c("Fish", "Aquatic Turtle")), ]
# check that it worked
table(V1075_GarTurtle$eco_type)
# export
write.csv(V1075_GarTurtle, "V1075_GarTurtle", row.names = FALSE)
V1075_GarTurtle <- read.csv("V1075_GarTurtle")
NIST120c <- read.csv("V1075_NIST120c")
NIST120c <- read.csv("V1075_NIST120c")
NIST120c <- read.csv("V1075_NIST120c.csv")
# export
write.csv(V1075_GarTurtle, "V1075_GarTurtle.csv", row.names = FALSE)
V1075_GarTurtle <- read.csv("V1075_GarTurtle.csv")
NIST120c <- read.csv("V1075_NIST120c.csv")
# Packages
packages <- c("dplyr", "purrr", "ggplot2", "Rcurl")
# install.packages(packages)
library(dplyr)
library(purrr)
library(ggplot2)
# library(Rcurl)
# Data
# Call d18Op data from GitHub, cleaned and averaged per specimen (V1075_BySpec.csv)
# samples_URL <- getURL("https://raw.githubusercontent.com/mattgeo1990/1075_Vertebrate_d18Op/main/Data/V1075_GarTurtle")
# V1075_GarTurtle <- read.csv(text = samples_URL)
# Call NIST120c data from Github, compiled from 2 TC-EA runs
# standards_URL <-"https://raw.githubusercontent.com/mattgeo1990/1075_Vertebrate_d18Op/main/Data/V1075_NIST120c.csv"
# NIST120c <- read.csv(standards_URL)
#
setwd("/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op/Data")
V1075_GarTurtle <- read.csv("V1075_GarTurtle.csv")
NIST120c <- read.csv("V1075_NIST120c.csv")
# Set number of Monte Carlo repetitions
nMCrepetitions <- 1e5
# Subset V1075_GarTurtle into gar and turtle matrices
gar <- subset(V1075_GarTurtle, eco_type = "Fish")
turtle <- subset(V1075_GarTurtle, eco_type = "Aquatic Turtle")
# resample
synth_gar <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>%
mutate(means = mean(sample(gar$d18O, replace = TRUE)))
synth_turtle <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>%
mutate(means = mean(sample(turtle$d18O, replace = TRUE)))
synth_NIST <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>%
mutate(means = mean(sample(NIST120c$d.18O.16O, replace = TRUE)))
# Plot histograms of each distribution
# Combine data frames into one
combined_data <- rbind(
data.frame(group = "Gar", values = synth_gar$means),
data.frame(group = "Turtle", values = synth_turtle$means),
data.frame(group = "NIST", values = synth_NIST$means)
)
# Set order of facets
combined_data$group <- factor(combined_data$group, levels = c("Gar", "Turtle", "NIST"))
# Plotting with ggplot2 using facet_wrap
ggplot(combined_data, aes(x = values, fill = group)) +
geom_histogram(position = "identity", alpha = 0.7, bins = 30, color = "black") +
labs(title = "Histogram of Means",
x = "Means",
y = "Frequency") +
theme_minimal() +
facet_wrap(~group, scales = "free")
# calculate water
# create function
turtlewater <- function(synthmeans_turtle){
1.01 *(synthmeans_turtle) - 22.3 #Barrick et al. (1999)
}
# run turtlewater on synth_turtle
synth_turtle <- synth_turtle %>%
mutate(d18Owater = turtlewater(means))
# Plot histogram of d18Owater
ggplot(synth_turtle, aes(x = d18Owater, fill = "Turtle")) +
geom_histogram(position = "identity", alpha = 0.7, bins = 30, color = "black") +
labs(title = "Histogram of d18Owater",
x = "d18Owater",
y = "Frequency") +
theme_minimal() +
scale_fill_manual(values = c("#1f78b4"))
synth_temps
df <- data.frame(synth_temps)
# calculate temps
# define temp function
TempFun <- function(d18Ofish, NISTmean, d18Owater) {
temp <- 118.7 - 4.22*((d18Ofish  +(22.6 - NISTmean)) - d18Owater)
}
# run TempFun over all the synthetic means
synth_temps <- TempFun(d18Ofish = synth_gar$means,
NISTmean = synth_NIST$means,
d18Owater = synth_turtle$d18Owater)
# Plotting histogram with ggplot2
df <- data.frame(synth_temps)
ggplot(synth_temps, aes(x = temps)) +
geom_histogram(position = "identity", alpha = 0.7, bins = 30, color = "black") +
labs(title = "Histogram of Simulated Temperature Estimates",
x = "Temperature (degrees Celsius)",
y = "Frequency") +
theme_minimal() +
scale_fill_manual(values = c("#ff0000"))
# calculate temps
# define temp function
TempFun <- function(d18Ofish, NISTmean, d18Owater) {
temp <- 118.7 - 4.22*((d18Ofish  +(22.6 - NISTmean)) - d18Owater)
}
# run TempFun over all the synthetic means
synth_temps <- TempFun(d18Ofish = synth_gar$means,
NISTmean = synth_NIST$means,
d18Owater = synth_turtle$d18Owater)
# Plotting histogram with ggplot2
df <- data.frame(synth_temps)
ggplot(synth_temps, aes(x = temps)) +
geom_histogram(position = "identity", alpha = 0.7, bins = 30, color = "black") +
labs(title = "Histogram of Simulated Temperature Estimates",
x = "Temperature (degrees Celsius)",
y = "Frequency") +
theme_minimal() +
scale_fill_manual(values = c("#ff0000"))
# Plotting histogram with ggplot2
ggplot(synth_temps, aes(x = temps)) +
geom_histogram(position = "identity", alpha = 0.7, bins = 30, color = "black") +
labs(title = "Histogram of Simulated Temperature Estimates",
x = "Temperature (degrees Celsius)",
y = "Frequency") +
theme_minimal() +
scale_fill_manual(values = c("#ff0000"))
# Set number of Monte Carlo repetitions
nMCrepetitions <- 1e5
# Subset V1075_GarTurtle into gar and turtle matrices
gar <- subset(V1075_GarTurtle, eco_type == "Fish")
turtle <- subset(V1075_GarTurtle, eco_type == "Aquatic Turtle")
synth_gar <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>%
mutate(means = mean(sample(gar$d18O, replace = TRUE)))
synth_turtle <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>%
mutate(means = mean(sample(turtle$d18O, replace = TRUE)))
synth_NIST <- data_frame(num = 1:nMCrepetitions) %>%
group_by(num) %>%
mutate(means = mean(sample(NIST120c$d.18O.16O, replace = TRUE)))
# Combine data frames into one
combined_data <- rbind(
data.frame(group = "Gar", values = synth_gar$means),
data.frame(group = "Turtle", values = synth_turtle$means),
data.frame(group = "NIST", values = synth_NIST$means)
)
# Set order of facets
combined_data$group <- factor(combined_data$group, levels = c("Gar", "Turtle", "NIST"))
# Plotting with ggplot2 using facet_wrap
ggplot(combined_data, aes(x = values, fill = group)) +
geom_histogram(position = "identity", alpha = 0.7, bins = 30, color = "black") +
labs(title = "Histogram of Means",
x = "Means",
y = "Frequency") +
theme_minimal() +
facet_wrap(~group, scales = "free")
# create function
turtlewater <- function(synthmeans_turtle){
1.01 *(synthmeans_turtle) - 22.3 #Barrick et al. (1999)
}
# run turtlewater on synth_turtle
synth_turtle <- synth_turtle %>%
mutate(d18Owater = turtlewater(means))
# calculate temps
# define temp function
TempFun <- function(d18Ofish, NISTmean, d18Owater) {
temp <- 118.7 - 4.22*((d18Ofish  +(22.6 - NISTmean)) - d18Owater)
}
# run TempFun over all the synthetic means
synth_temps <- TempFun(d18Ofish = synth_gar$means,
NISTmean = synth_NIST$means,
d18Owater = synth_turtle$d18Owater)
# plot temps
ggplot(data = data.frame(temperature = synth_temps), aes(x = temperature)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Temperatures",
x = "Temperature",
y = "Frequency")
# Plotting histogram with ggplot2
ggplot(synth_temps, aes(x = temp)) +
geom_histogram(position = "identity", alpha = 0.7, bins = 30, color = "black") +
labs(title = "Histogram of Simulated Temperature Estimates",
x = "Temperature (degrees Celsius)",
y = "Frequency") +
theme_minimal() +
scale_fill_manual(values = c("#ff0000"))
# Plotting histogram with ggplot2
ggplot(synth_temps, aes(x = temperature)) +
geom_histogram(position = "identity", alpha = 0.7, bins = 30, color = "black") +
labs(title = "Histogram of Simulated Temperature Estimates",
x = "Temperature (degrees Celsius)",
y = "Frequency") +
theme_minimal() +
scale_fill_manual(values = c("#ff0000"))
ggplot(data = data.frame(temperature = synth_temps), aes(x = temperature)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Temperatures",
x = "Temperature",
y = "Frequency")
ggplot(data = data.frame(temperature = synth_temps), aes(x = temperature)) +
geom_histogram(binwidth = 1, fill = c("#ff0000"), color = "black", alpha = 0.7) +
labs(title = "Histogram of Temperatures",
x = "Temperature",
y = "Frequency")
ggplot(data = data.frame(temperature = synth_temps), aes(x = temperature)) +
geom_histogram(binwidth = 1, fill = c("#ff0000"), color = "black", alpha = 0.7) +
labs(title = "Histogram of Temperatures",
x = "Temperature (degrees C)",
y = "Frequency")
# Calculate the confidence interval
sample.mean <- mean(synth_temps)
sample.n <- length(synth_temps)
sample.sd <- sd(synth_temps)
sample.se <- sample.sd/sqrt(sample.n)
print(sample.se)
alpha = 0.05
degrees.freedom = sample.n - 1
t.score = qt(p=alpha/2, df=degrees.freedom,lower.tail=F)
print(t.score)
margin.error <- t.score * sample.se
lower.bound <- sample.mean - margin.error
upper.bound <- sample.mean + margin.error
print(c(lower.bound,upper.bound))
cat("95% Confidence Interval: [", lower.bound, ", ", upper.bound, "]\n")
# Calculate the confidence interval
sample.mean <- mean(synth_temps)
sample.n <- length(synth_temps)
sample.sd <- sd(synth_temps)
sample.se <- sample.sd/sqrt(sample.n)
print(sample.se)
alpha = 0.05
degrees.freedom = sample.n - 1
t.score = qt(p=alpha/2, df=degrees.freedom,lower.tail=F)
print(t.score)
margin.error <- t.score * sample.se
lower.bound <- sample.mean - margin.error
upper.bound <- sample.mean + margin.error
print(c(lower.bound,upper.bound))
cat("95% Confidence Interval: [", lower.bound,",", upper.bound, "]\n")
# Calculate the confidence interval
sample.mean <- mean(synth_temps)
sample.n <- length(synth_temps)
sample.sd <- sd(synth_temps)
sample.se <- sample.sd/sqrt(sample.n)
print(sample.se)
alpha = 0.05
degrees.freedom = sample.n - 1
t.score = qt(p=alpha/2, df=degrees.freedom,lower.tail=F)
print(t.score)
margin.error <- t.score * sample.se
lower.bound <- sample.mean - margin.error
upper.bound <- sample.mean + margin.error
print(c(lower.bound,upper.bound))
cat("Mean temperature:", mean(synth_temps), "(degrees C)")
cat("95% Confidence Interval: [", lower.bound,",", upper.bound, "]\n")
# Calculate the confidence interval
sample.mean <- mean(synth_temps)
sample.n <- length(synth_temps)
sample.sd <- sd(synth_temps)
sample.se <- sample.sd/sqrt(sample.n)
print(sample.se)
alpha = 0.05
degrees.freedom = sample.n - 1
t.score = qt(p=alpha/2, df=degrees.freedom,lower.tail=F)
print(t.score)
margin.error <- t.score * sample.se
lower.bound <- sample.mean - margin.error
upper.bound <- sample.mean + margin.error
print(c(lower.bound,upper.bound))
cat("Mean temperature:", mean(synth_temps), "(degrees C)")
cat("95% Confidence Interval: [", lower.bound,",", upper.bound, "]\n")
# Calculate the confidence interval
sample.mean <- mean(synth_temps)
sample.n <- length(synth_temps)
sample.sd <- sd(synth_temps)
sample.se <- sample.sd/sqrt(sample.n)
print(sample.se)
alpha = 0.05
degrees.freedom = sample.n - 1
t.score = qt(p=alpha/2, df=degrees.freedom,lower.tail=F)
print(t.score)
margin.error <- t.score * sample.se
lower.bound <- sample.mean - margin.error
upper.bound <- sample.mean + margin.error
print(c(lower.bound,upper.bound))
cat("Mean temperature:", mean(synth_temps), "(degrees C)")
cat("95% Confidence Interval: [", lower.bound,",", upper.bound, "]\n")
CIfun <- function(data) {
sample.mean <- mean(data)
sample.n <- length(data)
sample.sd <- sd(data)
sample.se <- sample.sd/sqrt(sample.n)
alpha = 0.05
degrees.freedom = sample.n - 1
t.score = qt(p=alpha/2, df=degrees.freedom,lower.tail=F)
margin.error <- t.score * sample.se
lower.bound <- sample.mean - margin.error
upper.bound <- sample.mean + margin.error
cat("Mean:", mean(data))
cat("95% Confidence Interval: [", lower.bound,",", upper.bound, "]\n")
}
CIfun(synth_temps)
CIfun <- function(data) {
sample.mean <- mean(data)
sample.n <- length(data)
sample.sd <- sd(data)
sample.se <- sample.sd/sqrt(sample.n)
alpha = 0.05
degrees.freedom = sample.n - 1
t.score = qt(p=alpha/2, df=degrees.freedom,lower.tail=F)
margin.error <- t.score * sample.se
lower.bound <- sample.mean - margin.error
upper.bound <- sample.mean + margin.error
cat("Mean:", mean(data)) "/n"
CIfun <- function(data) {
sample.mean <- mean(data)
sample.n <- length(data)
sample.sd <- sd(data)
sample.se <- sample.sd/sqrt(sample.n)
alpha = 0.05
degrees.freedom = sample.n - 1
t.score = qt(p=alpha/2, df=degrees.freedom,lower.tail=F)
margin.error <- t.score * sample.se
lower.bound <- sample.mean - margin.error
upper.bound <- sample.mean + margin.error
cat("Mean:", mean(data)) /n
cat("95% Confidence Interval: [", lower.bound,",", upper.bound, "]\n")
}
CIfun(synth_temps)
CIfun <- function(data) {
sample.mean <- mean(data)
sample.n <- length(data)
sample.sd <- sd(data)
sample.se <- sample.sd/sqrt(sample.n)
alpha = 0.05
degrees.freedom = sample.n - 1
t.score = qt(p=alpha/2, df=degrees.freedom,lower.tail=F)
margin.error <- t.score * sample.se
lower.bound <- sample.mean - margin.error
upper.bound <- sample.mean + margin.error
cat("Mean:", mean(data), /n)
CIfun <- function(data) {
sample.mean <- mean(data)
sample.n <- length(data)
sample.sd <- sd(data)
sample.se <- sample.sd/sqrt(sample.n)
alpha = 0.05
degrees.freedom = sample.n - 1
t.score = qt(p=alpha/2, df=degrees.freedom,lower.tail=F)
margin.error <- t.score * sample.se
lower.bound <- sample.mean - margin.error
upper.bound <- sample.mean + margin.error
cat("Mean:", mean(data), "/n")
cat("95% Confidence Interval: [", lower.bound,",", upper.bound, "]\n")
}
CIfun(synth_temps)
CIfun <- function(data) {
sample.mean <- mean(data)
sample.n <- length(data)
sample.sd <- sd(data)
sample.se <- sample.sd/sqrt(sample.n)
alpha = 0.05
degrees.freedom = sample.n - 1
t.score = qt(p=alpha/2, df=degrees.freedom,lower.tail=F)
margin.error <- t.score * sample.se
lower.bound <- sample.mean - margin.error
upper.bound <- sample.mean + margin.error
cat("Mean:", mean(data), "\n")
cat("95% Confidence Interval: [", lower.bound,",", upper.bound, "]\n")
}
CIfun(synth_temps)
CIfun <- function(data) {
sample.mean <- mean(data)
sample.n <- length(data)
sample.sd <- sd(data)
sample.se <- sample.sd/sqrt(sample.n)
alpha = 0.05
degrees.freedom = sample.n - 1
t.score = qt(p=alpha/2, df=degrees.freedom,lower.tail=F)
margin.error <- t.score * sample.se
lower.bound <- sample.mean - margin.error
upper.bound <- sample.mean + margin.error
cat("Mean:", mean(data), "\n")
cat("95% Confidence Interval:", lower.bound,",", upper.bound,"\n")
}
CIfun(synth_temps)
# Calculate the confidence interval
CIfun <- function(data) {
sample.mean <- mean(data)
sample.n <- length(data)
sample.sd <- sd(data)
sample.se <- sample.sd/sqrt(sample.n)
alpha = 0.05
degrees.freedom = sample.n - 1
t.score = qt(p=alpha/2, df=degrees.freedom,lower.tail=F)
margin.error <- t.score * sample.se
lower.bound <- sample.mean - margin.error
upper.bound <- sample.mean + margin.error
cat("Mean:", mean(data), "\n")
cat("95% Confidence Interval:", lower.bound,",", upper.bound,"\n")
}
CIfun(synth_temps)
# Read in cleaned data (include link to script that cleans the data?)
# Call V1075_cl from GitHub
# cleaning script is here: https://github.com/mattgeo1990/1075_Vertebrate_d18Op/blob/main/Code/V1075_d18O.R
setwd("/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op/Data")
V1075_BySpec <- read.csv("V1075_BySpec.csv")
# Source NIST data
# READ IN NIST120c STD d18Op VALUES FROM RUN 1 and RUN 2
# NEED NIST120C STD d18Op from Run 3!!!!!
standards_githubURL <-"https://raw.githubusercontent.com/mattgeo1990/1075_Vertebrate_d18Op/main/Data/V1075_NIST120c.csv"
NIST120c <- read_csv(standards_githubURL)
sd(NIST120c$d.18O.16O)
# gather stats
NIST120c_mean <- mean(NIST120c$d.18O.16O)
# subset fish scales
GarScales <- subset(V1075_BySpec, Element.type = "ganoid scale")
# subset Croc G
CrocG <- subset(V1075_BySpec, Taxon == "Goniopholidae")
# subset Aquatic Turtle
AquaTurt <- subset(V1075_BySpec, Taxon == "Glyptops sp.")
# For now, just source from local
setwd("/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op/Data")
V1075_GarTurtle <- read.csv("V1075_GarTurtle.csv")
NIST120c <- read.csv("V1075_NIST120c.csv")
# subset fish scales
GarScales <- subset(V1075_BySpec, Element.type = "ganoid scale")
# subset Croc G
CrocG <- subset(V1075_BySpec, Taxon == "Goniopholidae")
V1075_BySpec <- read.csv("V1075_BySpec.csv")
NIST120c <- read.csv("V1075_NIST120c.csv")
# subset fish scales
GarScales <- subset(V1075_BySpec, Element.type = "ganoid scale")
# subset Croc G
CrocG <- subset(V1075_BySpec, Taxon == "Goniopholidae")
# subset Aquatic Turtle
AquaTurt <- subset(V1075_BySpec, Taxon == "Glyptops sp.")
# subset Croc G
CrocG <- subset(V1075_BySpec, eco_type == "Croc G")
# subset Aquatic Turtle
AquaTurt <- subset(V1075_BySpec, eco_type == "Aquatic Turtle")
# Gather Means
# Croc G
AquaCroc_d18Op_mean <- mean(CrocG$d18O)
# Glyptops
AquaTurt_d18Op_mean <- mean(AquaTurt$d18O)
# Gar scales
GarScales_d18Op_mean <- mean(GarScales$d18O)
# Dual-Taxon Temperature Estimates
# Calculate d18Osurface_water
crocwater <- 0.82*(AquaCroc_d18Op_mean) - 19.93 #Amiot et al.(2007)
turtwater <- 1.01 *(AquaTurt_d18Op_mean) - 22.3 #Barrick et al. (1999)
# Calculate Temps (Puceat et al., 2010)
CrocFish_temp <- 118.7 - 4.22*((GarScales_d18Op_mean  +(22.6 - NIST120c_mean)) - crocwater )
TurtleFish_temp <- 118.7 - 4.22*((GarScales_d18Op_mean  +(22.6 - NIST120c_mean)) - turtwater )
TurtleFish_temp <- 118.7 - 4.22*((GarScales_d18Op_mean  +(22.6 - NIST120c_mean)) - turtwater )
GarScales_d18Op_mean
AquaTurt_d18Op_mean
View(GarScales)
# subset fish scales
GarScales <- subset(V1075_BySpec, Element.type == "ganoid scale")
# subset Croc G
CrocG <- subset(V1075_BySpec, eco_type == "Croc G")
# subset Aquatic Turtle
AquaTurt <- subset(V1075_BySpec, eco_type == "Aquatic Turtle")
# Gather Means
# Croc G
AquaCroc_d18Op_mean <- mean(CrocG$d18O)
# Glyptops
AquaTurt_d18Op_mean <- mean(AquaTurt$d18O)
# Gar scales
GarScales_d18Op_mean <- mean(GarScales$d18O)
# Dual-Taxon Temperature Estimates
# Calculate d18Osurface_water
crocwater <- 0.82*(AquaCroc_d18Op_mean) - 19.93 #Amiot et al.(2007)
turtwater <- 1.01 *(AquaTurt_d18Op_mean) - 22.3 #Barrick et al. (1999)
# Calculate Temps (Puceat et al., 2010)
CrocFish_temp <- 118.7 - 4.22*((GarScales_d18Op_mean  +(22.6 - NIST120c_mean)) - crocwater )
TurtleFish_temp <- 118.7 - 4.22*((GarScales_d18Op_mean  +(22.6 - NIST120c_mean)) - turtwater )
# Calculate Temps (Puceat et al., 2010)
temp_CrocFish <- 118.7 - 4.22*((GarScales_d18Op_mean  +(22.6 - NIST120c_mean)) - crocwater )
temp_TurtleFish <- 118.7 - 4.22*((GarScales_d18Op_mean  +(22.6 - NIST120c_mean)) - turtwater )
# Gather mean for each eco_type
V1075_summary <- V1075_BySpec %>%
group_by(eco_type) %>%
summarise(
thermophysiology = first(thermophysiology),  # Assuming thermophysiology is constant within each eco_type
n = n(),
d18Opmean = mean(d18O, na.rm = TRUE)
)
