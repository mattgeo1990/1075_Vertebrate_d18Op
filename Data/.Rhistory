sd_d18O = sd(d.18O.VPDB))
# Create a box whisker plot for each ID4 group
ggplot(summary_stats, aes(x = mean_d18O, y = factor(ID4))) +
geom_errorbarh(aes(xmin = mean_d18O - sd_d18O, xmax = mean_d18O + sd_d18O), height = 0.2) +
geom_point() +
geom_line() +  # Adding this line to connect the points
labs(x = "Mean d18O", y = "ID4") +
ggtitle("Mean and Standard Deviation of d18O for each ID4 group")
# Strat depth
# oxygen
summary_stats_bystrat <- primary_sorted %>%
group_by(Strat) %>%
summarise(mean_d18O = mean(d.18O.VPDB),
sd_d18O = sd(d.18O.VPDB))
ggplot(summary_stats_bystrat, aes(x = mean_d18O, y = Strat)) +
geom_errorbarh(aes(xmin = mean_d18O - sd_d18O, xmax = mean_d18O + sd_d18O), height = 0.2) +
geom_point() +
geom_path(aes(group = 1), color = "blue", linetype = "dotted") +  # Change color to blue and linetype to dotted
labs(x = "Mean d18O", y = "Strat (m above PCM)", title = "d18Ocarb by strat position") +
theme_minimal()  # Adding minimal theme for a clean look
# Get unique microfacies values
unique_microfacies <- unique(pilots$microfacies)
# Create a list to store the subsets
microfacies_subsets <- list()
# Subset the data frame for each microfacies
for (microfacies_value in unique_microfacies) {
subset_df <- subset(pilots, microfacies == microfacies_value)
microfacies_subsets[[microfacies_value]] <- subset_df
}
# Rename columns
colnames(mean_d18O) <- c("Microfacies", "Strat", "Mean_d18O")
# Plot
ggplot(pilots, aes(x = d.18O.VPDB, y = Strat, shape = microfacies)) +
geom_point(size = 1) +
scale_shape_manual(values = 1:length(unique_microfacies)) +  # Change symbol shapes
labs(x = "d.18O.VPDB", y = "Strat", shape = "Microfacies") +
theme_minimal()
# Carbon
summary_stats_bystrat <- primary_sorted %>%
group_by(Strat) %>%
summarise(mean_d13C = mean(d.13C.VPDB),
sd_d13C = sd(d.13C.VPDB))
ggplot(summary_stats_bystrat, aes(x = mean_d13C, y = Strat)) +
geom_errorbarh(aes(xmin = mean_d13C - sd_d13C, xmax = mean_d13C + sd_d13C), height = 0.2) +
geom_point() +
geom_path(aes(group = 1), color = "blue", linetype = "dotted") +  # Change color to blue and linetype to dotted
labs(x = "Mean d13C", y = "Strat (m above PCM)", title = "d13Ccarb by strat position") +
theme_minimal()  # Adding minimal theme for a clean look
# Create a scatter plot with groups by shape
ggplot(pilots, aes(x=d.18O.VPDB, y=d.13C.VPDB, shape = microfacies)) +
geom_point(size = 2) +
scale_shape_manual(values = c(0,1,2,3,4,5,6)) + # Customize shape values
labs(title = "C and O isotopes by microfacies", x = Odelt_vpbd, y = Cdelt) +
theme_minimal()
str(pilots)
# remove spar and dolomite
primary <- subset(pilots, !(microfacies %in% c("spar", "dolomite")))
# convert VPDB to VSMOW
primary$d.18O.VSMOW <- to_VSMOW(primary$d.18O.VPDB)
# calculate water d18O assuming mean annual warm season temp of 22.5째C
primary$d18Owater_VSMOW <- d18O_H2O(temp = 22.5, d18O_c_VSMOW = primary$d.18O.VSMOW,
min = "calcite", eq = "KO97")primary
# calculate water d18O assuming mean annual warm season temp of 22.5째C
primary$d18Owater_VSMOW <- d18O_H2O(temp = 22.5, d18O_c_VSMOW = primary$d.18O.VSMOW,
min = "calcite", eq = "KO97")
# Subset the meteoric calcite line
MCL <- primary[primary$d.18O.VPDB > -10 & pilots$d.18O.VPDB < -7.5, ]
# take mean and SD of MCL d18Owater_VSMOW values
mean(MCL$d18Owater_VSMOW)
View(MCL)
# remove spar and dolomite
primary <- subset(pilots, !(microfacies %in% c("spar", "dolomite")))
View(primary)
# convert VPDB to VSMOW
primary$d.18O.VSMOW <- to_VSMOW(primary$d.18O.VPDB)
# calculate water d18O assuming mean annual warm season temp of 22.5째C
primary$d18Owater_VSMOW <- d18O_H2O(temp = 22.5, d18O_c_VSMOW = primary$d.18O.VSMOW,
min = "calcite", eq = "KO97")
# Subset the meteoric calcite line
MCL <- primary[primary$d.18O.VPDB > -10 & pilots$d.18O.VPDB < -7.5, ]
# Subset the meteoric calcite line
MCL <- pilots[(pilots$d.18O.VPDB > -10) & (pilots$d.18O.VPDB < -7.5), ]
# take mean and SD of MCL d18Owater_VSMOW values
mean(MCL$d18Owater_VSMOW)
# remove spar and dolomite
primary <- subset(pilots, !(microfacies %in% c("spar", "dolomite")))
# convert VPDB to VSMOW
primary$d.18O.VSMOW <- to_VSMOW(primary$d.18O.VPDB)
# remove spar and dolomite
primary <- subset(pilots, !(microfacies %in% c("spar", "dolomite")))
# convert VPDB to VSMOW
primary$d.18O.VSMOW <- to_VSMOW(primary$d.18O.VPDB)
# calculate water d18O assuming mean annual warm season temp of 22.5째C
primary$d18Owater_VSMOW <- d18O_H2O(temp = 22.5, d18O_c_VSMOW = primary$d.18O.VSMOW,
min = "calcite", eq = "KO97")
# Subset the meteoric calcite line
MCL <- pilots[(pilots$d.18O.VPDB > -10) & (pilots$d.18O.VPDB < -7.5), ]
# take mean and SD of MCL d18Owater_VSMOW values
mean(MCL$d18Owater_VSMOW)
MCL <- primary[which(primary$d.18O.VPDB > -10 & primary$d.18O.VPDB < -7.5), ]
# take mean and SD of MCL d18Owater_VSMOW values
mean(MCL$d18Owater_VSMOW)
MCL <- primary[which(primary$d.18O.VPDB > -10 & primary$d.18O.VPDB < -7.5), ]
MCL2.0 <- MCL[which(MCL$d.13C.VPDB > -8 & MCL$d.13C.VPDB < -6), ]
mean(MCL2.0$d18Owater_VSMOW)
# modeling for uncertainty in temperature parameter
model <- data.frame(temp = numeric(), d18Owater_VSMOW = numeric())
model$temp <- 20:30
model$temp <- seq(20, 30, by = 1)
model <- nrow(11)
# modeling for uncertainty in temperature parameter
model <- data.frame(temp = numeric(), d18Owater_VSMOW = numeric())
# modeling for uncertainty in temperature parameter
model <- data.frame(temp = numeric(), d18Owater_VSMOW = numeric())
model$temp <- seq(20, 30, by = 1)
# modeling for uncertainty in temperature parameter
model <- data.frame(temp = numeric(11), d18Owater_VSMOW = numeric(11))
model$temp <- seq(20, 30, by = 1)
model$d18Owater_VSMOW <- d18O_H2O(temp = model$temp, d18O_c_VSMOW = model$d.18O.VSMOW,
min = "calcite", eq = "KO97")
model$d18Owater_VSMOW
model$d18Owater_VSMOW <- d18O_H2O(temp = model$temp, d18O_c_VSMOW = model$d.18O.VSMOW,
min = "calcite", eq = "KO97")
m <- mean(MCL$d.18O.VSMOW)
model$d18Owater_VSMOW <- d18O_H2O(temp = model$temp, m,
min = "calcite", eq = "KO97")
plot(model$temp, model$d18Owater_VSMOW)
range(model$d18Owater_VSMOW)
model$temp <- seq(18, 28, by = 1)
m <- mean(MCL$d.18O.VSMOW)
model$d18Owater_VSMOW <- d18O_H2O(temp = model$temp, m,
min = "calcite", eq = "KO97")
plot(model$temp, model$d18Owater_VSMOW)
range(model$d18Owater_VSMOW)
h <- seq(0, 1, by = 0.1)
p <- 18
d <- ((p-26.8+8.9h)/0.76)
d <- (p-26.8+8.9h)/0.76
d <- ((p)-26.8+8.9*(h))/0.76
range(d)
plot(x = d, y = h)
((p)-26.8+8.9*(0.3))/0.76
((p)-26.8+8.9*(0.25))/0.76
GarScales_d18Op_mean
# For now, just source from local
setwd("/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op/Data")
V1075_BySpec <- read.csv("V1075_BySpec.csv")
NIST120c <- read.csv("V1075_NIST120c.csv")
gar <- subset(V1075_BySpec, Taxon == "Lepisosteids")
mean(gar$d18O..VSMOW.)
gar$d18O..VSMOW.
gm <- mean(gar$d18O..VSMOW.)
NIST120c <- read.csv("V1075_NIST120c.csv")
nm <- mean(NIST120c$d.18O.16O)
d18Ow <- seq(-6.5, -10, by = -1)
d18Ow
d18Ow <- seq(-6.5, -10, by = -0.5)
d18Ow
temp <- 118.7 - 4.22*((gm  +(22.6 - nm)) - d18Ow)
df <- data.frame(d18Ow, temp)
df
plot(df$d18Ow, df$temp)
# Generate x-values
x <- seq(0, 24, length.out = 100)  # Assuming the period of the sine curve is 24 units
# Generate y-values (sine function)
amplitude <- 5
wavelength <- 12
y <- amplitude * sin(2 * pi * x / wavelength)
# Generate x-values
x <- seq(0, 24, length.out = 100)  # Assuming the period of the sine curve is 24 units
# Generate y-values (sine function)
amplitude <- 5
wavelength <- 12
y <- amplitude * sin(2 * pi * x / wavelength)
# Create a dataframe with x and y values
df <- data.frame(x = x, y = y)
# Plot the sine curve
ggplot(df, aes(x = x, y = y)) +
geom_line() +
labs(title = "Sine Curve with Wavelength 12 and Amplitude 5",
x = "X", y = "Y") +
theme_minimal()
# Generate x-values
x <- seq(0, 24, length.out = 100)  # Assuming the period of the sine curve is 24 units
# Generate y-values (sine function)
amplitude <- 2.5
wavelength <- 12
y <- amplitude * sin(2 * pi * x / wavelength)
# Create a dataframe with x and y values
df <- data.frame(x = x, y = y)
# Plot the sine curve
ggplot(df, aes(x = x, y = y)) +
geom_line() +
labs(title = "Sine Curve with Wavelength 12 and Amplitude 5",
x = "X", y = "Y") +
theme_minimal()
# Generate x-values
x <- seq(0, 24, length.out = 100)  # Assuming the period of the sine curve is 24 units
# Generate y-values (sine function)
amplitude <- 2.5
wavelength <- 12
y <- amplitude * sin(2 * pi * x / wavelength)
# Create a dataframe with x and y values
df <- data.frame(x = x, y = y)
# Plot the sine curve
ggplot(df, aes(x = x, y = y)) +
geom_line() +
labs(title = "Sine Curve with Wavelength 12 and Amplitude 5",
x = "X", y = "Y") +
theme_minimal()
# Calculate the threshold value for the upper 33 percentile
threshold <- quantile(df$y, probs = 0.67)
# Subset the dataframe based on the threshold value
upper_33_percentile <- df[df$y > threshold, ]
# Plot the original data and the subset
ggplot() +
geom_line(data = df, aes(x = x, y = y), color = "blue") +
geom_point(data = upper_33_percentile, aes(x = x, y = y), color = "red") +
labs(title = "Sine Curve with Upper 33 Percentile Subset",
x = "X", y = "Y") +
theme_minimal()
# Generate x-values
x <- seq(0, 24, length.out = 100)  # Assuming the period of the sine curve is 24 units
# Amplitude of the sine curve
amplitude <- 5  # Amplitude of 5 means the curve oscillates between -5 and 5 with 0 in the middle
# Midline or mean of the sine curve
midline <- -8.5
# Generate y-values (sine function)
y <- midline + amplitude * sin(2 * pi * x / wavelength)
# Adjust the plot title to reflect the new midline
plot_title <- paste("Sine Curve with Amplitude", amplitude, "and Midline", midline)
# Plot the sine curve
ggplot(df, aes(x = x, y = y)) +
geom_line() +
labs(title = plot_title,
x = "X", y = "Y") +
theme_minimal()
# Generate x-values
x <- seq(0, 24, length.out = 100)  # Assuming the period of the sine curve is 24 units
# Amplitude of the sine curve
amplitude <- 5  # Amplitude of 5 means the curve oscillates between -5 and 5 with 0 in the middle
# Midline or mean of the sine curve
midline <- -8.5
# Generate y-values (sine function)
y <- midline + amplitude * sin(2 * pi * x / 12)  # Adjust wavelength to 12
# Adjust the plot title to reflect the new midline
plot_title <- paste("Sine Curve with Amplitude", amplitude, "and Midline", midline)
# Create a dataframe with x and y values
df <- data.frame(x = x, y = y)
# Plot the sine curve
ggplot(df, aes(x = x, y = y)) +
geom_line() +
labs(title = plot_title,
x = "X", y = "Y") +
theme_minimal()
# Generate x-values
x <- seq(0, 24, length.out = 100)  # Assuming the period of the sine curve is 24 units
# Amplitude of the sine curve
amplitude <- 2.5  # Amplitude of 5 means the curve oscillates between -5 and 5 with 0 in the middle
# Midline or mean of the sine curve
midline <- -8.5
# Generate y-values (sine function)
y <- midline + amplitude * sin(2 * pi * x / 12)  # Adjust wavelength to 12
# Adjust the plot title to reflect the new midline
plot_title <- paste("Sine Curve with Amplitude", amplitude, "and Midline", midline)
# Create a dataframe with x and y values
df <- data.frame(x = x, y = y)
# Plot the sine curve
ggplot(df, aes(x = x, y = y)) +
geom_line() +
labs(title = plot_title,
x = "X", y = "Y") +
theme_minimal()
# Calculate the threshold value for the upper 33 percentile
threshold <- quantile(df$y, probs = 0.67)
# Subset the dataframe based on the threshold value
upper_33_percentile <- df[df$y > threshold, ]
# Plot the original data and the subset
ggplot() +
geom_line(data = df, aes(x = x, y = y), color = "blue") +
geom_point(data = upper_33_percentile, aes(x = x, y = y), color = "red") +
labs(title = "Sine Curve with Upper 33 Percentile Subset",
x = "X", y = "Y") +
theme_minimal()
mean(upper_33_percentile$y)
summer_bias <- mean(upper_33_percentile$y)
gar <- subset(V1075_BySpec, Taxon == "Lepisosteids")
gm <- mean(gar$d18O..VSMOW.)
nm <- mean(NIST120c$d.18O.16O)
temp <- 118.7 - 4.22*((gm  +(22.6 - nm)) - summer_bias)
temp
22.3 - 5
17.3 -5
22.3+ 5
27.3+5
summer_bias
gm
cat(temp1, temp2)
temp1 <- 118.7 - 4.22*((gm  +(22.6 - nm)) - summer_bias)
temp2 <- 118.7 - 4.22*((gm  +(22.6 - nm)) - summer_bias)
cat(temp1, temp2)
temp2 <- 118.7 - 4.22*(((gm-2)  +(22.6 - nm)) - (summer_bias-2))
cat(temp1, temp2)
temp1 <- 118.7 - 4.22*((gm  +(22.6 - nm)) - summer_bias)
temp2 <- 118.7 - 4.22*(((gm-2)  +(22.6 - nm)) - (summer_bias-2))
temp3 <- 118.7 - 4.22*(((5)  +(22.6 - nm)) - (-5))
temp4 <- 118.7 - 4.22*(((7)  +(22.6 - nm)) - (-7))
cat(temp1, temp2, temp3, temp4)
temp3 <- 118.7 - 4.22*(((5)  +(22.6 - nm)) - (-5))
temp4 <- 118.7 - 4.22*(((7)  +(22.6 - nm)) - (-3))
cat(temp1, temp2, temp3, temp4)
temp3 <- 118.7 - 4.22*(((13)  +(22.6 - nm)) - (-8))
temp4 <- 118.7 - 4.22*(((15)  +(22.6 - nm)) - (-6))
cat(temp1, temp2, temp3, temp4)
nm
# boundary conditions
# treat nm as constant
summer <- -6
annual_mean <- -8
tempmod <- 22.3
garmod <- (4.22 * ( ( tempmod - 118.7 ) / 4.22 ) + gm + 22.6 - nm)
garmod
garmod <- 4.22 * ((tempmod - 118.7 + 4.22 * summer) / 4.22) -22.6 + nm
garmod
garmod <- 4.22 * (tempmod - 118.7 + 4.22 * summer) -22.6 + nm
garmod
garmod <- ((tempmod - 118.7 + 4.22 * summer) / -4.22) -22.6 + nm
garmod
garmod2 <- ((tempmod - 118.7 + 4.22 * annual_mean) / -4.22) -22.6 + nm
garmod2
cat(gar_summer, gar_annual_mean)
cat(gar_summer, gar_annualmean)
gar_summer <- ((tempmod - 118.7 + 4.22 * summer) / -4.22) -22.6 + nm
gar_annualmean <- ((tempmod - 118.7 + 4.22 * annual_mean) / -4.22) -22.6 + nm
cat(gar_summer, gar_annualmean)
paste("Gar phosphate. Summer bias:", gar_summer, ". Mean annual:", gar_annualmean)
paste("Gar phosphate. Summer bias:", round(gar_summer, 1), ". Mean annual:", round(gar_annualmean, 1))
paste("Gar phosphate. Summer bias:", round(gar_summer, 1), ". Mean annual:", round(gar_annualmean, 1))
paste("Gar phosphate d18O. Summer bias:", round(gar_summer, 1), ". Mean annual:", round(gar_annualmean, 1))
gm
summer_bias
118.7 - 4.22*((gm  +(22.6 - nm)) - summer_bias)
118.7 - 4.22*((13  +(22.6 - nm)) - -6)
summer_bias
118.7 - 4.22*((13  +(22.6 - nm)) - -6.4)
gm
118.7 - 4.22*((13.8  +(22.6 - nm)) - -6.4)
gar_summer <- ((tempmod - 118.7 + 4.22 * summer) / -4.22) -22.6 + nm
gar_summer
gar_annualmean <- ((tempmod - 118.7 + 4.22 * annual_mean) / -4.22) -22.6 + nm
gar_annualmean
d18O <- seq(-5, -10, by = 0.25)
d18O <- seq(-5, -10, by == 0.25)
d18O <- seq(-5, -10, by = -0.25)
gar_forplot <- ((tempmod - 118.7 + 4.22 * d18O) / -4.22) -22.6 + nm
plot(gar_forplot, d18O)
temp3 <- 118.7 - 4.22*(((13)  +(22.6 - nm)) - (-8))
temp4 <- 118.7 - 4.22*(((15)  +(22.6 - nm)) - (-6))
cat(temp1, temp2, temp3, temp4)
temp4 <- 118.7 - 4.22*(((12)  +(22.6 - nm)) - (-6))
cat(temp1, temp2, temp3, temp4)
118.7 - (4.22 * (15)) - (-6)
118.7 - (4.22 * (15)) - (-8)
118.7 - (4.22 * (10)) - (-8)
temp3 <- 118.7 - 4.22*(((13)  +(22.6 - nm)) - (-8))
temp4 <- 118.7 - 4.22*(((11)  +(22.6 - nm)) - (-6))
cat(temp1, temp2, temp3, temp4)
d18Op <- 12
d18Ow <- -8
118.7 - 4.22 * (d18Op - d18Ow)
d18Op <- 14
d18Ow <- -6
temp2 <- 118.7 - 4.22 * (d18Op - d18Ow)
cat(temp1, temp2, temp3, temp4)
d18Ow <- -8
d18Op <- (118.7 - temp2 + 4.22 * d18Ow) / 4.22
d18Op
d18Ow <- -6
d18Op <- (118.7 - temp2 + 4.22 * d18Ow) / 4.22
d18Op
d18Ow <- -8
d18Op1 <- (118.7 - temp2 + 4.22 * d18Ow) / 4.22
d18Ow <- -6
d18Op2 <- (118.7 - temp2 + 4.22 * d18Ow) / 4.22
cat(d18Op1, d18Op2)
d18Ow <- seq(-6.5, -10, by = -0.5)
d18Op <- (118.7 - temp2 + 4.22 * d18Ow) / 4.22
plot(d18Ow, d18Op)
gm
round(gm, 2)
g <- 13.84
w <- -8
t <- 118.7 - 4.22*((g  +(22.6 - nm)) - d)
118.7 - 4.22*((g  +(22.6 - nm)) - d)
g <- 13.84
w <- -8
118.7 - 4.22*((g  +(22.6 - nm)) - w)
g <- 13.84
w <- -6
118.7 - 4.22*((g  +(22.6 - nm)) - w)
w <- -10
118.7 - 4.22*((g  +(22.6 - nm)) - w)
w <- -9
118.7 - 4.22*((g  +(22.6 - nm)) - w)
w <- -8
118.7 - 4.22*((g  +(22.6 - nm)) - w)
w <- -9
118.7 - 4.22*((g  +(22.6 - nm)) - w)
w <- -8
118.7 - 4.22*((g  +(22.6 - nm)) - w)
g <- 13.84
w <- -8
118.7 - 4.22*((g  +(22.6 - nm)) - w)
w <- -8.5
118.7 - 4.22*((g  +(22.6 - nm)) - w)
w <- -9
118.7 - 4.22*((g  +(22.6 - nm)) - w)
g <- 13.84
w <- -8.5
118.7 - 4.22*((g  +(22.6 - nm)) - w)
g <- 14.84
w <- -8.5
118.7 - 4.22*((g  +(22.6 - nm)) - w)
g <- 14.84
w <- -10
118.7 - 4.22*((g  +(22.6 - nm)) - w)
g <- 13.84
w <- -8
118.7 - 4.22*((g  +(22.6 - nm)) - w)
g <- 13.84
w <- -8.5
118.7 - 4.22*((g  +(22.6 - nm)) - w)
w <- -8.5
118.7 - 4.22*((g  +(22.6 - nm)) - w)
w <- -8.7
118.7 - 4.22*((g  +(22.6 - nm)) - w)
w <- -8.8
118.7 - 4.22*((g  +(22.6 - nm)) - w)
w <- -8.9
118.7 - 4.22*((g  +(22.6 - nm)) - w)
w <- -8.95
118.7 - 4.22*((g  +(22.6 - nm)) - w)
# Calculate d18Osurface_water
crocwater <- 0.82*(AquaCroc_d18Op_mean) - 19.93 #Amiot et al.(2007)
# For now, just source from local
setwd("/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op/Data")
V1075_BySpec <- read.csv("V1075_BySpec.csv")
NIST120c <- read.csv("V1075_NIST120c.csv")
# subset fish scales
GarScales <- subset(V1075_BySpec, Element.type == "ganoid scale")
# subset Croc G
CrocG <- subset(V1075_BySpec, eco_type == "Croc G")
# subset Aquatic Turtle
AquaTurt <- subset(V1075_BySpec, eco_type == "Aquatic Turtle")
# plot histograms of d18Op
ggplot(GarScales, aes(x = d18O)) +
geom_histogram(binwidth = 1, fill = c("#ff0000"), color = "black", alpha = 0.7) +
labs(title = "Histogram of Gar Scale d18Op",
x = "d18Op",
y = "Frequency")
# Gather Means
# Croc G
AquaCroc_d18Op_mean <- mean(CrocG$d18O)
# Glyptops
AquaTurt_d18Op_mean <- mean(AquaTurt$d18O)
# Gar scales
GarScales_d18Op_mean <- mean(GarScales$d18O)
# NIST
NIST120c_mean <- mean(NIST120c$d.18O.16O)
# Calculate d18Osurface_water
crocwater <- 0.82*(AquaCroc_d18Op_mean) - 19.93 #Amiot et al.(2007)
crocwater
turtwater <- 1.01 *(AquaTurt_d18Op_mean) - 22.3 #Barrick et al. (1999)
turtwater
GarScales_d18Op_mean
g2 <- 14.46
w <- -8.95
118.7 - 4.22*((g2  +(22.6 - nm)) - w)
g2 <- 14.46
w <- -8.5
118.7 - 4.22*((g2  +(22.6 - nm)) - w)
w <- -8.4
118.7 - 4.22*((g2  +(22.6 - nm)) - w)
w <- -8.35
118.7 - 4.22*((g2  +(22.6 - nm)) - w)
g2 <- 14.46
w <- -8.35
118.7 - 4.22*((g2  +(22.6 - nm)) - w)
w <- -9.35
118.7 - 4.22*((g2  +(22.6 - nm)) - w)
w <- -12
118.7 - 4.22*((g2  +(22.6 - nm)) - w)
w <- -11
118.7 - 4.22*((g2  +(22.6 - nm)) - w)
w <- -10
118.7 - 4.22*((g2  +(22.6 - nm)) - w)
w <- -11
118.7 - 4.22*((g2  +(22.6 - nm)) - w)
g_all <- 14.46
w <- -11
118.7 - 4.22*((g2  +(22.6 - nm)) - w)
w <- -10
118.7 - 4.22*((g2  +(22.6 - nm)) - w)
w <- -9
118.7 - 4.22*((g2  +(22.6 - nm)) - w)
w <- -9
# temp constant, d18Ow constant, d18Ogarphosphate increases
# evaporation and/or warm-season bias of d18Ow estimate would give HOT bias to temp reconstruction
g_scales <- 13.84
g_all <- 14.46
w <- -9
118.7 - 4.22*((g_all  +(22.6 - nm)) - w)
