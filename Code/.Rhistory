# histograms of d18O by eco_type
# Plotting a panel of histograms
ggplot(V1075_BySpec, aes(x = d18O, fill = eco_type)) +
geom_histogram(binwidth = 1, color = "black", alpha = 0.7) +
labs(title = "Histogram of d18O by eco_type",
x = "d18O",
y = "Frequency") +
theme_minimal() +
facet_wrap(~eco_type, scales = "free")
# Perform Shapiro-Wilk test for normality for each eco_type
shapiro_tests <- by(V1075_BySpec$d18O, V1075_BySpec$eco_type, shapiro.test)
# Display normality test results
cat("\nNormality Tests:\n")
print(shapiro_tests)
# Extract p-values from the test results
p_values <- sapply(shapiro_tests, function(x) x$p.value)
# Highlight non-normally distributed groups (p-value < 0.05)
non_normal_groups <- names(p_values[p_values < 0.05])
cat("\nNon-normally distributed groups:", ifelse(length(non_normal_groups) > 0, paste(non_normal_groups, collapse = ", "), "None"), "\n")
# Filter data for "Small Theropod" eco_type
small_theropod_data <- subset(V1075_BySpec, eco_type == "Small Theropod")
# Plotting histogram for "Small Theropod" eco_type
ggplot(small_theropod_data, aes(x = d18O)) +
geom_histogram(binwidth = 1, color = "black", fill = "lightblue", alpha = 0.7) +
labs(title = "Histogram of d18O for Small Theropod",
x = "d18O",
y = "Frequency") +
theme_minimal()
source("V1075_d18O.R")
setwd("/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op/Code")
source("V1075_d18O.R")
oxydelt <- expression("δ"^18 * "O‰ (VSMOW)")
# Install and load required packages
packages_to_install <- c("ggpubr", "gridExtra", "ggplot2", "knitr", "outliers", "dplyr")
if (length(setdiff(packages_to_install, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages_to_install, rownames(installed.packages())))
}
library(gridExtra)
library(ggpubr)
library(knitr)
library(ggplot2)
library(outliers)
library(dplyr)
setwd("/Users/allen/Documents/Data Analysis/Data/")
raw <- read.csv("V1075_PhosphateData_8-18-23_copy.csv")
setwd("/Users/allen/Documents/Data Analysis/Data/Geochem")
NIST120c <- read.csv("V1075_NIST120c_Run1&2.csv")
NIST120c_mean <- mean(NIST120c$d.18O.16O)
head(raw)
tax <- raw$Taxon
raw$Taxon <- as.factor(raw$Taxon)
d18O <- raw$d18O..VSMOW.
Taxa <- unique(tax)
print(Taxa)
nTaxa <- as.matrix(table(tax))
# Define a vector of unique categories in the "Eco" column
eco_categories <- unique(raw$Eco)
# Create an empty list to store the test results
test_results <- list()
# Perform Grubbs' test for each category
for (category in eco_categories) {
subset_data <- raw$d18O..VSMOW.[which(raw$Eco %in% category)]
test <- grubbs.test(subset_data)
test_results[[category]] <- test
}
# Print the results
for (category in eco_categories) {
cat("Grubbs' Test for", category, ":\n")
print(test_results[[category]])
cat("\n")
}
#test
#test <- grubbs.test(raw$d18O..VSMOW.[which(raw$Eco %in% "Shark")])
#test
#test <- grubbs.test(raw$d18O..VSMOW.[which(raw$Eco %in% "Croc A")])
#test
#test <- grubbs.test(raw$d18O..VSMOW.[which(raw$Eco %in% "Sauropoda")])
#test
#test <- grubbs.test(raw$d18O..VSMOW.[which(raw$Eco %in% "Small Theropod")])
#test
# outliers identified in Croc A, Small Theropod
V1075_cl <- subset(raw, raw$d18O..VSMOW. < 22.47)
# remove dentine samples
V1075_cl <- subset(V1075_cl, V1075_cl$Tissue != "dentine")
# remove gar teeth
V1075_cl <- subset(V1075_cl, !(Eco == "Fish" & Element.type == "tooth"))
# Define a function to calculate mean, standard error, and standard deviation
calculate_stats <- function(data, taxon) {
subset_data <- data[which(data$Taxon %in% taxon), ]
mean_val <- mean(subset_data$d18O..VSMOW.)
se_val <- sd(subset_data$d18O..VSMOW.) / sqrt(length(subset_data$d18O..VSMOW.))
sd_val <- sd(subset_data$d18O..VSMOW.)
return(list(mean = mean_val, se = se_val, sd = sd_val))
}
# List of taxa
taxa_list <- list(
Hybo = c("Hybodontiformes"),
CrocA = c("\"Atoposauridae\" (croc. indet.)"),
Gar = c("Lepisosteidae"),
TurtleN = c("Naomichelys sp."),
TheroSmall = c("Theropoda (small)"),
Teno = c("Tenontosaurus tillettii"),
Sauropelta = c("Sauropelta edwardsi"),
Glyp = c("Glyptops sp."),
TheroLarge = c("Large Theropoda"),
Sauropoda = c("Sauropoda"),
Goni = c("Goniopholidae"),
Berni = c("Bernissartia sp."),
Deino = c("Deinonychus antirrhopus"),
Orni = c("Ornithischian")
)
# Calculate and print statistics for each taxon
for (taxon_name in names(taxa_list)) {
stats <- calculate_stats(V1075_cl, taxa_list[[taxon_name]])
cat("Taxon:", taxon_name, "\n")
cat("Mean:", stats$mean, "\n")
cat("Standard Error:", stats$se, "\n")
cat("Standard Deviation:", stats$sd, "\n\n")
}
table(V1075_cl$Taxon)
unique(V1075_cl$Eco)
Hybo <- subset(V1075_cl, Taxon == "Hybodontiformes")
CrocA <- subset(V1075_cl, Taxon == "\"Atoposauridae\" (croc. indet.)")
Gar <- subset(V1075_cl, Taxon == "Lepisosteidae")
TurtleN <- subset(V1075_cl, Taxon == "Naomichelys sp.")
TheroSmall <- subset(V1075_cl, Taxon == "Theropoda (small)")
Teno <- subset(V1075_cl, Taxon == "Tenontosaurus tillettii")
Sauropelta <- subset(V1075_cl, Taxon == "Sauropelta edwardsi")
Glyp <- subset(V1075_cl, Taxon == "Glyptops sp.")
source("V1075_d18O.R")
setwd("/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op/Code")
source("V1075_d18O.R")
setwd("/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op")
# Set a seed for reproducibility
set.seed(123)
# Number of subsamples
num_subsamples <- 1000
# Original sample size
n <- length(scales$d18O..VSMOW.)
# Initialize vectors to store results
subsample_sizes <- numeric(num_subsamples)
variances <- numeric(num_subsamples)
standard_errors <- numeric(num_subsamples)
standard_deviations <- numeric(num_subsamples)
# Generate random subsamples, calculate mean, variance, standard error, and standard deviation for each
for (i in 1:num_subsamples) {
subsample_size <- sample(3:n, 1) # calls sample function to generate one subsample size anywhere from 3 to n
subsample <- sample(scales$d18O..VSMOW., subsample_size, replace = FALSE) #  creates a random subsample from the vector scales$d18O..VSMOW. with a specified subsample size
mean_value <- mean(subsample)
variance_value <- var(subsample)
standard_error_value <- sd(subsample) / sqrt(subsample_size)
standard_deviation_value <- sd(subsample)
subsample_sizes[i] <- subsample_size
variances[i] <- variance_value
standard_errors[i] <- standard_error_value
standard_deviations[i] <- standard_deviation_value
}
# Create data frames with the results
variance_df <- data.frame(Subsample_Size = subsample_sizes, Variance = variances)
se_df <- data.frame(Subsample_Size = subsample_sizes, Standard_Error = standard_errors)
sd_df <- data.frame(Subsample_Size = subsample_sizes, Standard_Deviation = standard_deviations)
# Plot variance using ggplot with x-axis ticks every 5 units
ggplot(variance_df, aes(x = Subsample_Size, y = Variance)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE) +
labs(title = "Variance vs Subsample Size",
x = "Subsample Size",
y = "Variance") +
scale_x_continuous(breaks = seq(0, n, by = 5)) +  # Set x-axis ticks every 5 units
theme_minimal()
# Plot standard error using ggplot with x-axis ticks every 5 units
ggplot(se_df, aes(x = Subsample_Size, y = Standard_Error)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE) +
labs(title = "Standard Error vs Subsample Size",
x = "Subsample Size",
y = "Standard Error") +
scale_x_continuous(breaks = seq(0, n, by = 5)) +  # Set x-axis ticks every 5 units
theme_minimal()
# Plot standard deviation using ggplot with x-axis ticks every 5 units
ggplot(sd_df, aes(x = Subsample_Size, y = Standard_Deviation)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE) +
labs(title = "Standard Deviation vs Subsample Size",
x = "Subsample Size",
y = "Standard Deviation") +
scale_x_continuous(breaks = seq(0, n, by = 5)) +  # Set x-axis ticks every 5 units
theme_minimal()
# Set a seed for reproducibility
set.seed(123)
# Simulate a dataset of 50 values that is normally distributed
simulated_data <- rnorm(50, mean = mean(scales$d18O..VSMOW.), sd = sd(scales$d18O..VSMOW.))
# Number of subsamples
num_subsamples <- 1000
# Initialize vectors to store results
subsample_sizes <- numeric(num_subsamples)
---
title: "1075 Stats"
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
summary(cars)
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
plot(pressure)
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
# Plot histograms with ggplot2
ggplot(combined_results, aes(x = mean_improvement)) +
geom_histogram(binwidth = 0.1, fill = "blue", color = "black", alpha = 0.7) +
facet_wrap(~Group, scales = "free") +
labs(title = "Histograms of Simulated Data by Eco Group",
x = "Mean Improvement",
y = "Frequency") +
theme_minimal()
# Packages and Data -------------------------------------------------------
# Install and load necessary packages
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
library(ggplot2)
setwd("/Users/allen/Documents/GitHub/1075_Vertebrate_d18Op/Code")
source("V1075_d18O.R")
# Setup
x <- scales$d18O..VSMOW. # extract the isotope data from the dataframe
output <- matrix(0, nrow = 50, ncol = 1000)  # create empty output matrices
output1 <- matrix(0, nrow = 50, ncol = 1000)
output2 <- matrix(0, nrow = 48, ncol = 1)
output3 <- matrix(0, nrow = 48, ncol = 1)
# Sampling Loop
for (n in 2:49) {  # initiate main loop. Should be generating sample sizes from 3-50
for (m in 1:1000) {  # initiate sub loop. This is telling R to run the enclosed simulation 1000 times (bootstrapping n = 1000)
y <- sample(x, 50, replace = TRUE)  # draw m samples at random from the data with replacement (SHOULD I DISABLE REPLACEMENT?)
output[n, m] <- mean(y[1:(n + 1)])  # average samples of sizes 3 to 50 from the random sample in y
}
}
# Test Loop
for (n in 1:49) {  # initiate main loop
for (m in 1:1000) {  # initiate sub loop
output1[n, m] <- abs(output[n, m] - output[n + 1, m])  # calculate absolute differences between successive sample sizes
}
}
# Gather Statistics
for (n in 1:48) {  # initiate loop. Why 48?
output2[n, 1] <- mean(output1[n, 1:1000])  # calculate mean improvement at each sample size
output3[n, 1] <- sd(output1[n, 1:1000])  # calculate SD on improvement at each sample size
}
# Create a data frame for plotting
plot_data <- data.frame(n = 1:48, mean_improvement = output2[, 1], sd_improvement = output3[, 1])
# Plot with ggplot2
ggplot(plot_data, aes(x = n, y = mean_improvement)) +
geom_line() +
geom_ribbon(aes(ymin = mean_improvement - sd_improvement, ymax = mean_improvement + sd_improvement), alpha = 0.2) +
labs(title = "Mean Improvement vs. Sample Size",
x = "Sample Size",
y = "Mean Improvement") +
theme_minimal()
output1 <- matrix(0, nrow = 1000, ncol = 49)  # create empty output matrices
output2 <- matrix(0, nrow = 1000, ncol = 49)
output3 <- matrix(0, nrow = 1000, ncol = 49)
# Sampling Loop
for (m in 2:50) {  # initiate main loop
for (n in 1:1000) {  # initiate sub loop
y <- sample(x, m, replace = TRUE)  # draw m samples at random from the carbon data with replacement
a <- mean(y)  # calculate the mean of the m samples
b <- 1.96 * (sd(y) / sqrt(m))  # calculate the 95%CI for the m samples
output1[n, m - 1] <- a + b  # calculate mean plus 95%CI...
output2[n, m - 1] <- a - b  # ...and mean minus 95%CI
}
}
truemean <- median(boot::boot(x, R = 1000, statistic = function(x, i) mean(x[i]))$t)  # calculate 'true' mean via bootstrap
# Test Loop
output3 <- matrix(0, nrow = 1000, ncol = 49)  # recreate empty output matrix
for (m in 1:1000) {  # initiate main loop
for (n in 1:49) {  # initiate sub loop
if (truemean <= output1[m, n] & truemean >= output2[m, n]) {  # initiate conditional loop
output3[m, n] <- 1  # output 1 if true...
} else {
output3[m, n] <- 0  # ...output 0 if false
}
}
}
output4 <- matrix(0, nrow = 1, ncol = 49)  # seed empty vector
for (m in 1:49) {  # initiate loop
output4[1, m] <- sum(output3[, m]) / 1000  # calculate proportion of true values in each column of output3
}
# Create a data frame for plotting
plot_data <- data.frame(n = 1:49, proportion = output4[1,])
# Plot with ggplot2
ggplot(plot_data, aes(x = n, y = proportion)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, color = "blue") +  # "lm" stands for linear model
labs(title = "Proportion of Estimates Containing True Mean vs. Sample Size",
x = "Sample Size",
y = "Proportion") +
theme_minimal()
# Need to source V1075_BySpec from AllOxyCompare.R
# First, omit Large Theropod (only one specimen)
V1075_BySpec <- subset(V1075_BySpec, eco_type != "Large Theropod")
# Assuming 'x' is your d18O values and 'Eco' is your grouping variable
x <- V1075_BySpec$d18O
groups <- V1075_BySpec$eco_type
# Create an empty list to store results for each group
results_list <- list()
# Loop over each Eco group
for (group in unique(groups)) {
# Subset the data for the current group
group_data <- x[groups == group]
# Ovis Simulation 1
output <- matrix(0, nrow = 50, ncol = 1000)
output1 <- matrix(0, nrow = 50, ncol = 1000)
output2 <- matrix(0, nrow = 48, ncol = 1)
output3 <- matrix(0, nrow = 48, ncol = 1)
for (n in 1:49) {
for (m in 1:1000) {
y <- sample(group_data, 50, replace = TRUE)
output[n, m] <- mean(y[1:(n + 1)])
}
}
for (n in 1:49) {
for (m in 1:1000) {
output1[n, m] <- abs(output[n, m] - output[n + 1, m])
}
}
for (n in 1:48) {
output2[n, 1] <- mean(output1[n, 1:1000])
output3[n, 1] <- sd(output1[n, 1:1000])
}
# Store results in a data frame
plot_data <- data.frame(
Group = rep(group, 48),
n = 1:48,
mean_improvement = output2[, 1],
sd_improvement = output3[, 1]
)
# Add results to the list
results_list[[group]] <- plot_data
}
# Combine results for all groups into a single data frame
combined_results <- do.call(rbind, results_list)
# Plot with ggplot2
library(ggplot2)
ggplot(combined_results, aes(x = n, y = mean_improvement, color = Group, linetype = Group)) +
geom_line() +
labs(title = "Mean Improvement vs. Sample Size by Eco Group",
x = "Sample Size",
y = "Mean Improvement (‰)",
color = "Eco Group",
linetype = "Eco Group") +
theme_minimal()
# OVIS 2
# Load necessary libraries
if (!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
library(dplyr)
# Create an empty list to store results for each group
results_list <- list()
# Loop over each Eco group
for (group in unique(groups)) {
# Subset the data for the current group
group_data <- x[groups == group]
# Ovis Simulation 2
output1 <- matrix(0, nrow = 1000, ncol = 49)
output2 <- matrix(0, nrow = 1000, ncol = 49)
output3 <- matrix(0, nrow = 1000, ncol = 49)
for (m in 2:50) {
for (n in 1:1000) {
y <- sample(group_data, m, replace = TRUE)
a <- mean(y)
b <- 1.96 * (sd(y) / sqrt(m))
output1[n, m - 1] <- a + b
output2[n, m - 1] <- a - b
}
}
truemean <- median(boot::boot(group_data, R = 1000, statistic = function(x, i) mean(x[i]))$t)
output3 <- matrix(0, nrow = 1000, ncol = 49)
for (m in 1:1000) {
for (n in 1:49) {
if (truemean <= output1[m, n] & truemean >= output2[m, n]) {
output3[m, n] <- 1
} else {
output3[m, n] <- 0
}
}
}
output4 <- matrix(0, nrow = 1, ncol = 49)
for (m in 1:49) {
output4[1, m] <- sum(output3[, m]) / 1000
}
# Store results in a data frame
plot_data <- data.frame(
Group = rep(group, 49),
n = 1:49,
proportion = output4[1, ]
)
# Add results to the list
results_list[[group]] <- plot_data
}
# Combine results for all groups into a single data frame
combined_results <- bind_rows(results_list)
# Plot with ggplot2
library(ggplot2)
ggplot(combined_results, aes(x = n, y = proportion, color = Group, linetype = Group)) +
geom_line() +
labs(title = "Proportion of Estimates Containing True Mean vs. Sample Size by Eco Group",
x = "Sample Size",
y = "Proportion",
color = "Eco Group",
linetype = "Eco Group") +
theme_minimal()
# Assuming 'x' is your d18O values and 'Eco' is your grouping variable
x <- V1075_cl$d18O..VSMOW.
groups <- V1075_cl$Eco
# Load necessary libraries
if (!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
library(dplyr)
library(ggplot2)
# Create an empty list to store results for each group
results_list <- list()
# Loop over each Eco group
for (group in unique(groups)) {
# Subset the data for the current group
group_data <- x[groups == group]
# Ovis Simulation 1
output <- matrix(0, nrow = 50, ncol = 1000)
for (n in 1:49) {
for (m in 1:1000) {
y <- sample(group_data, 50, replace = TRUE)
output[n, m] <- mean(y[1:(n + 1)])
}
}
# Store results in a data frame
plot_data <- data.frame(
Group = rep(group, each = 49 * 1000),
n = rep(1:49, times = 1000),
mean_improvement = as.vector(output)
)
# Add results to the list
results_list[[group]] <- plot_data
}
# Combine results for all groups into a single data frame
combined_results <- bind_rows(results_list)
# Plot histograms with ggplot2
ggplot(combined_results, aes(x = mean_improvement)) +
geom_histogram(binwidth = 0.1, fill = "blue", color = "black", alpha = 0.7) +
facet_wrap(~Group, scales = "free") +
labs(title = "Histograms of Simulated Data by Eco Group",
x = "Mean Improvement",
y = "Frequency") +
theme_minimal()
groups <- V1075_cl$Eco
# Load necessary libraries
if (!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
library(dplyr)
library(ggplot2)
# Create an empty list to store results for each group
results_list <- list()
# Loop over each Eco group
for (group in unique(groups)) {
# Subset the data for the current group
group_data <- x[groups == group]
# Ovis Simulation 1
output <- matrix(0, nrow = 50, ncol = 1000)
for (n in 1:49) {
for (m in 1:1000) {
y <- sample(group_data, 50, replace = TRUE)
output[n, m] <- mean(y[1:(n + 1)])
}
}
# Store results in a data frame
plot_data <- data.frame(
Group = rep(group, each = 49 * 1000),
n = rep(1:49, times = 1000),
mean_improvement = as.vector(output)
)
# Add results to the list
results_list[[group]] <- plot_data
}
# Store results in a data frame
plot_data <- data.frame(
Group = rep(group, each = 50 * 1000),
n = rep(1:49, times = 1000),
mean_improvement = as.vector(output)
)
for (n in 1:49) {
for (m in 1:1000) {
y <- sample(group_data, 50, replace = TRUE)
output[n, m] <- mean(y[1:(n + 1)])
}
}
# Subset the data for the current group
group_data <- x[groups == group]
# Store results in a data frame
plot_data <- data.frame(
Group = rep(group, each = 49 * 1000),
n = rep(1:49, times = 1000),
mean_improvement = as.vector(output)
)
# PLACEHOLDER
library(ggplot2)
